Version history

Public API changes from 1.0.0-beta1 onwards. See the [project repository](http://code.google.com/p/noda-time/source/list) for
more details.

## 1.0.0-rc ##

- Renamed `DateTimeZone.GetOffsetFromUtc` to `DateTimeZone.GetUtcOffset` to
  match the BCL ([issue 121][])
- Added `LocalDate.FromWeekYearWeekAndDay` ([issue 120][])
- Text formats can now parse negative values for absolute years ([issue 118][])
- `Tick`, `SecondOfDay` and `MillisecondOfDay` properties removed from
  time-based types ([issue 103][])

## 1.0.0-beta2, released 2012-08-04 with tzdb 2012e

- Overhaul of how to get a `DateTimeZone` from an ID:
   - `IDateTimeZoneProvider` (SPI for time zones) renamed to
     `IDateTimeZoneSource`, along with similar renaming for the built-in
     sources
   - New interface `IDateTimeZoneProvider` aimed at *callers*, with caching
     assumed
   - New class `DateTimeZoneProviders` with static properties to access the
     built-in providers: TZDB, BCL and default (currently TZDB)
   - Removed various `DateTimeZone` static methods in favour of always going
     via an `IDateTimeZoneProvider` implementation
   - `DateTimeZoneCache` now public and implements `IDateTimeZoneProvider`
- `DateTimeZone` no longer has internal abstract methods, making third-party
  implementations possible ([issue 77][])
- `DateTimeZone` now implements `IEquatable<DateTimeZone>`, and documents what
  it means for time zones to be equal ([issue 81][])
- New core type: `OffsetDateTime` representing a local date/time and an offset
  from UTC, but not full time zone information
- Added a new standard offset pattern of `G`, which is like `g` but using
  "Z" for zero; also available as `OffsetPattern.GeneralInvariantPatternWithZ`
- `Period` and `PeriodBuilder` no longer differentiate between absent and zero
  components (to the extent that they did at all): `Units` has been removed
  from `Period`, period formatting now omits all zero values unconditionally,
  and the `Year` (etc) properties on `PeriodBuilder` are no longer nullable
  ([issue 90][])
- Removed the BCL parsing methods and some of the BCL formatting methods from
  `Instant`, `LocalDate`, `LocalDateTime`, and `Offset` in favour of the
  pattern-based API ([issue 87][])
- `Duration.ToString()` and `Interval.ToString()` now return more descriptive
  text

- Removed `DateTimeZone.GetSystemDefaultOrNull()`; callers should use the
  provider's `GetSystemDefault()` method and (if necessary) catch the
  `TimeZoneNotFoundException` that it can throw ([issue 61][])
- Removed `DateTimeZone.UtcId` and `DateTimeZone.IsFixed` (issues [64][issue 64]
  and [62][issue 62])
- Removed most of the convenience static properties on `Duration` (e.g.
  `Duration.OneStandardDay`) in favour of the existing static methods; removed
  `MinValue` and `MaxValue`, and added `Epsilon` ([issue 70][])
- Removed `Instant.BeginningOfTimeLabel` and `Instant.EndOfTimeLabel`
- `Instant.InIsoUtc` renamed to `InUtc`
- `Instant.UnixEpoch` moved to `NodaConstants.UnixEpoch`;
  `NodaConstants.DateTimeEpochTicks` replaced by `BclEpoch`
- Added `Instant.PlusTicks()`
- `LocalDate.LocalDateTime` property changed to `LocalDate.AtMidnight()` method
  ([issue 56][])
- `LocalTime` now implements `IComparable<LocalTime>` ([issue 51][])
- Added a `LocalTime` constructor taking hours and minutes ([issue 53][])
- Removed "component" properties from `Offset`, and renamed the "total"
  properties to just `Ticks` and `Milliseconds`
- Removed `Offset.Create()` methods (and moved them in slightly different form
  in a new internal `TestObjects` class in `NodaTime.Test`)
- Added `Period.ToDuration()` ([issue 55][]) and `Period.CreateComparer()`
  ([issue 69][])
- `Period.Empty` renamed to `Period.Zero` (as part of [issue 90][])
- `PeriodBuilder` no longer implements `IEquatable<PeriodBuilder>`
  ([issue 91][])
- Removed `SystemClock.SystemNow` in favour of using `SystemClock.Instance.Now`
  if you really have to
- Added `ZonedDateTime.ToOffsetDateTime()`, which returns the `OffsetDateTime`
  equivalent to a `ZonedDateTime`
- Removed the Buddhist `Era` (as there is no Buddhist calendar implementation)

- `NodaTime.Testing.StubClock` renamed to `FakeClock`, and gains an
  auto-advance option (issues [72][issue 72] and [73][issue 73])
- `NodaTime.Testing.TimeZones.SingleTransitionZone` renamed to
  `SingleTransitionDateTimeZone`

## 1.0.0-beta1, released 2012-04-12 with tzdb 2012c

- Initial beta release

[issue 51]: http://code.google.com/p/noda-time/issues/detail?id=51
[issue 53]: http://code.google.com/p/noda-time/issues/detail?id=53
[issue 55]: http://code.google.com/p/noda-time/issues/detail?id=55
[issue 56]: http://code.google.com/p/noda-time/issues/detail?id=56
[issue 61]: http://code.google.com/p/noda-time/issues/detail?id=61
[issue 62]: http://code.google.com/p/noda-time/issues/detail?id=62
[issue 64]: http://code.google.com/p/noda-time/issues/detail?id=64
[issue 69]: http://code.google.com/p/noda-time/issues/detail?id=69
[issue 70]: http://code.google.com/p/noda-time/issues/detail?id=70
[issue 72]: http://code.google.com/p/noda-time/issues/detail?id=72
[issue 73]: http://code.google.com/p/noda-time/issues/detail?id=73
[issue 77]: http://code.google.com/p/noda-time/issues/detail?id=77
[issue 81]: http://code.google.com/p/noda-time/issues/detail?id=81
[issue 87]: http://code.google.com/p/noda-time/issues/detail?id=87
[issue 90]: http://code.google.com/p/noda-time/issues/detail?id=90
[issue 91]: http://code.google.com/p/noda-time/issues/detail?id=91
[issue 103]: http://code.google.com/p/noda-time/issues/detail?id=103
[issue 118]: http://code.google.com/p/noda-time/issues/detail?id=118
[issue 120]: http://code.google.com/p/noda-time/issues/detail?id=120
[issue 121]: http://code.google.com/p/noda-time/issues/detail?id=121
