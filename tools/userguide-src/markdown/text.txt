Handling text in Noda Time

There are two primary options for text handling in Noda Time. You
can either follow the "normal" approach from the .NET Base Class
Library (BCL) or use the pattern-based approach which is specific to
Noda Time. You are *encouraged* to use the pattern-based approach as
we believe it is more robust, clearer, and performs better than the
BCL approach - but the choice is yours. Ultimately the two APIs use
the same implementation, so you can transition from on to the other
without worrying about compatibility - or you can even mix and match
the two, if you must.

All the types responsible for text in Noda Time are in the
[NodaTime.Text][3] namespace.

The pattern-based API
---------------------

A *pattern* is an object capable of *parsing* from text to a specific
type, and *formatting* a value to text. Parsing and formatting don't
take any other options: the pattern knows everything about how to
map between the value and text. In particular, internationalization
is handled using a [`NodaFormatInfo`][2], which implements
[`IFormatProvider`][1]. Whereas using the BCL approach the format
information has to be specified on every call, using the pattern
approach the format information is fixed for any particular pattern.
Convenience methods are provided to create new pattern instances
based on existing ones but with different internationalization
information or other options.

The BCL-based API
-----------------

Each of the core Noda Time types ([`LocalDateTime`][4],
[`Instant`][5] etc) provide (or will provide :) methods with the
following signatures:

**Formatting (instance methods):**

- `ToString()`: Formats the value using the default pattern for the
current thread's format provider.
- `ToString(IFormatProvider)`: Formats the value using the default
pattern for the specified format provider.
- `ToString(string)`: Formats the value with the given pattern in
the current thread's format provider.
- `ToString(string, IFormatProvider)`: Formats the value with the
given pattern and format provider.

**Parsing (static methods):**

- `Parse(string)`: Parses the given text in all default patterns for
the current thread's format provider, throwing an exception if the
text cannot be parsed.
- `Parse(string, IFormatProvider)`: Parses the given text in all
default patterns for the specified format provider, throwing an
exception if the text cannot be parsed.
- `ParseExact(string, string, IFormatProvider)`: Parses the given
text in exactly the pattern and format provider specified, throwing
an exception if the text cannot be parsed.
- `TryParse(string, out ResultType)`: Attempts to parse the given
text in all default patterns for the current thread's format
provider, returning a `bool` value to indicate success or failure
and using an `out` parameter to convey the parsed value (on success)
or some default value (on failure).
- `TryParse(string, IFormatProvider, out ResultType)`: Attempts to parse the given
text in all default patterns for the given format
provider, returning a `bool` value to indicate success or failure
and using an `out` parameter to convey the parsed value (on success)
or some default value (on failure).
- `TryParseExact(string, string, IFormatProvider, out ResultType)`: Attempts to parse the given
text in the exact pattern specified using the given format provider, 
returning a `bool` value to indicate success or failure and using
an `out` parameter to convey the parsed value (on success)
or some default value (on failure).
- `TryParseExact(string, string[], IFormatProvider, out ResultType)`: Attempts to parse the given
text in any of the patterns specified using the given format provider,
returning a `bool` value to indicate success or failure and using
an `out` parameter to convey the parsed value (on success)
or some default value (on failure).

  [1]: http://msdn.microsoft.com/en-us/library/system.iformatprovider.aspx
  [2]: noda-type://NodaTime.Globalization.NodaFormatInfo
  [3]: noda-ns://NodaTime.Text
  [4]: noda-type://NodaTime.LocalDateTime
  [5]: noda-type://NodaTime.Instant
  
