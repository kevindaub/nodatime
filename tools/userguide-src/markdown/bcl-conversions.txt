BCL Conversions

Various Noda Time types have "broadly similar" types in the .NET framework. Where appropriate,
conversions are provided - we have no illusions that you'll be able to use Noda Time for *everything*.
Noda Time attempts to shield you from using "the wrong kind of `DateTime`"

All BCL type conversions to Noda Time types which have implicit calendar systems (`LocalDateTime` etc) use
the ISO-8601 calendar.

DateTime
========

`DateTime` can represent many things (which is [one of the reasons](http://noda-time.blogspot.com/2011/08/what-wrong-with-datetime-anyway.html) Noda Time exists).

However, the following mappings are reasonable:

<table>
  <thead>
    <tr>
      <td>Noda Time type</td>
      <td>DateTime kind</td>
      <td>Noda Time to BCL conversion</td>
      <td>BCL to Noda Time conversion</td>
	  <td>Notes</td>
    </tr>
  </thead>
  <tbody>
    <tr>
	  <td>Instant</td>
	  <td>Universal</td>
	  <td>Instant.ToDateTimeUtc</td>
	  <td>Instant.FromDateTimeUtc</td>
	  <td></td>
    </tr>
    <tr>
	  <td>ZonedDateTime</td>
	  <td>Universal</td>
	  <td>ZonedDateTime.ToDateTimeUtc</td>
	  <td>n/a</td>
	  <td>This preserves the instant, but loses the time zone information</td>
    </tr>
    <tr>
	  <td>ZonedDateTime</td>
	  <td>Unspecified</td>
	  <td>ZonedDateTime.ToDateTimeUnspecified</td>
	  <td>n/a</td>
	  <td>This preserves the local time, but loses the time zone information</td>
    </tr>
    <tr>
	  <td>LocalDateTime</td>
	  <td>Unspecified</td>
	  <td>LocalDateTime.ToDateTimeUnspecified</td>
	  <td>LocalDateTime.FromDateTime</td>
	  <td>FromDateTime uses the "local" value of the DateTime regardless of kind</td>
    </tr>
  </tbody>
</table>

Note that there are no conversions to a `DateTime` with a kind of `Local` - this would effectively
be for the system default time zone, which you should generally be explicit about to start with.

DateTimeOffset
==============

There's no direct corresponding type to `DateTimeOffset` in Noda Time, but it can be represented as
a `ZonedDateTime` with a fixed time zone. That's exactly what `ZonedDateTime.FromDateTimeOffset` does,
but you must be aware that "real" time zone information is lost as soon as you've got a `DateTimeOffset` - 
it represents an exact instant in time, with a local offset from UTC, but that doesn't tell you what the
local offset would be a minute later or earlier. The reverse conversion (`ZonedDateTime.ToDateTimeOffset`)
loses the time zone information in a similar way.

`Instant` also provides conversions to and from `DateTimeOffset`; `ToDateTimeOffset` will always return a
`DateTimeOffset` with an offset of zero, and `FromDateTimeOffset` will "subtract" the offset from local time,
to represent the appropriate instant in time - but without any further trace of the offset, which isn't stored
in an `Instant`.

TimeSpan
========

Both [`Offset`](noda-type://NodaTime.Offset) and [`Duration`](noda-type://NodaTime.Duration) are similar to `TimeSpan`,
but they're used in different senses; `Offset` is used to indicate the difference between UTC and local time, whereas
a `Duration` is simply an arbitrary number of ticks.

Both types have `ToTimeSpan` and `FromTimeSpan` methods, although `Offset.FromTimeSpan` will throw an `ArgumentOutOfRangeException`
if the `TimeSpan` has a magnitude of 24 hours or more.

TimeZoneInfo
============

The main time zone type in Noda Time is [`DateTimeZone`](noda-type://NodaTime.DateTimeZone) and by default this will use the
zoneinfo time zone database. However, if you want to create a `DateTimeZone` which corresponds exactly to a particular `TimeZoneInfo`,
there are some options using [`BclTimeZone`](noda-type://NodaTime.TimeZones.BclTimeZone):

- You can call `DateTimeZone.SetProvider(new BclTimeZoneProvider())` which will replace the zoneinfo provider with one
  which simply uses the system time zones provided by the BCL. This is appropriate if you're going to work with various time zones,
  and you only ever care about the BCL versions.
- To convert a single time zone, you can can `BclTimeZone.FromTimeZoneInfo`
- If you just need the system default time zone, you can call `BclTimeZone.ForSystemDefault`. There are some circumstances where
  using `DateTimeZone.GetSystemDefault` may return null, indicating that there's no known mapping from the local BCL time zone
  ID to the current provider's time zone database. Using `BclTimeZone.ForSystemDefault()` *always* returns a converted version
  of the BCL time zone. This doesn't require that you've set the BCL time zone provider, and can be used to provide a fallback
  mechanism:

        DateTimeZone systemZone = DateTimeZone.GetSystemDefault() ?? BclTimeZone.ForSystemDefault();

There are various pros and cons involved in using the zoneinfo time zones vs the BCL ones.