BCL Conversions

Various Noda Time types have "broadly similar" types in the .NET framework. Where appropriate,
conversions are provided - we have no illusions that you'll be able to use Noda Time for *everything*.
Noda Time attempts to shield you from using "the wrong kind of `DateTime`"

All BCL type conversions to Noda Time types which have implicit calendar systems (`LocalDateTime` etc) use
the ISO-8601 calendar.

DateTime
========

`DateTime` can represent many things (which is [one of the reasons](http://noda-time.blogspot.com/2011/08/what-wrong-with-datetime-anyway.html) Noda Time exists).

However, the following mappings are reasonable:

<table>
  <thead>
    <tr>
      <td>Noda Time type</td>
      <td>`DateTime` kind</td>
      <td>Noda Time to BCL conversion</td>
      <td>BCL to Noda Time conversion</td>
	  <td>Notes</td>
    </tr>
  </thead>
  <tbody>
    <tr>
	  <td>[`Instant`](noda-type://NodaTime.Instant)</td>
	  <td>Universal</td>
	  <td>`Instant.ToDateTimeUtc`</td>
	  <td>`Instant.FromDateTimeUtc`</td>
	  <td></td>
    </tr>
    <tr>
	  <td>[`ZonedDateTime`](noda-type://NodaTime.ZonedDateTime)</td>
	  <td>Universal</td>
	  <td>`ZonedDateTime.ToDateTimeUtc`</td>
	  <td>n/a</td>
	  <td>This preserves the instant, but loses the time zone information</td>
    </tr>
    <tr>
	  <td>[`ZonedDateTime`](noda-type://NodaTime.ZonedDateTime)</td>
	  <td>Unspecified</td>
	  <td>`ZonedDateTime.ToDateTimeUnspecified`</td>
	  <td>n/a</td>
	  <td>This preserves the local time, but loses the time zone information</td>
    </tr>
    <tr>
	  <td>[`LocalDateTime`](noda-type://NodaTime.LocalDateTime)</td>
	  <td>Unspecified</td>
	  <td>`LocalDateTime.ToDateTimeUnspecified`</td>
	  <td>`LocalDateTime.FromDateTime`</td>
	  <td>`FromDateTime` uses the "local" value of the `DateTime` regardless of kind</td>
    </tr>
  </tbody>
</thead>

Note that there are no conversions to a `DateTime` with a kind of `Local` - this would effectively
be for the system default time zone, which you should generally be explicit about to start with.

`DateTimeOffset`
================

There's no direct corresponding type to `DateTimeOffset` in Noda Time, but it can be represented as
a `ZonedDateTime` with a fixed time zone. That's exactly what `ZonedDateTime.FromDateTimeOffset` does,
but you must be aware that "real" time zone information is lost as soon as you've got a `DateTimeOffset` - 
it represents an exact instant in time, with a local offset from UTC, but that doesn't tell you what the
local offset would be a minute later or earlier. The reverse conversion (`ZonedDateTime.ToDateTimeOffset`)
loses the time zone information in a similar way.

`Instant` also provides conversions to and from `DateTimeOffset`; `ToDateTimeOffset` will always return a
`DateTimeOffset` with an offset of zero, and `FromDateTimeOffset` will "subtract" the offset from local time,
to represent the appropriate instant in time - but without any further trace of the offset, which isn't stored
in an `Instant`.

TimeSpan
========

Both [`Offset`](noda-type://NodaTime.Offset) and [`Duration`](noda-type://NodaTime.Duration) are similar to `TimeSpan`,
but they're used in different senses; `Offset` is used to indicate the difference between UTC and local time, whereas
a `Duration` is simply an arbitrary number of ticks.

Both types have `ToTimeSpan` and `FromTimeSpan` methods, although `Offset.FromTimeSpan` will throw an `ArgumentOutOfRangeException`
if the `TimeSpan` has a magnitude of 24 hours or more.

TimeZoneInfo
============

TBD