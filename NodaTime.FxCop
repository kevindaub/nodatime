<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="1.36" Name="My FxCop Project">
 <ProjectOptions>
  <SharedProject>True</SharedProject>
  <Stylesheet Apply="False">c:\program files\microsoft fxcop 1.36\Xml\FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded" NewOnly="False" />
   <Report Status="Active" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="True" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="True" />
  <EnableMultithreadedLoad>True</EnableMultithreadedLoad>
  <EnableMultithreadedAnalysis>True</EnableMultithreadedAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>10</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>1</RuleExceptionsThreshold>
  <Spelling Locale="en-US" />
  <OverrideRuleVisibilities>False</OverrideRuleVisibilities>
  <CustomDictionaries SearchFxCopDir="True" SearchUserProfile="True" SearchProjectDir="True" />
  <SearchGlobalAssemblyCache>False</SearchGlobalAssemblyCache>
  <DeadlockDetectionTimeout>120</DeadlockDetectionTimeout>
  <IgnoreGeneratedCode>False</IgnoreGeneratedCode>
 </ProjectOptions>
 <Targets>
  <AssemblyReferenceDirectories>
   <Directory>$(ProjectDir)/src/NodaTime/bin/Release/</Directory>
   <Directory>$(ProjectDir)/src/ZoneInfoCompiler/bin/Release/</Directory>
  </AssemblyReferenceDirectories>
  <Target Name="$(ProjectDir)/src/NodaTime/bin/Debug/NodaTime.dll" Analyze="True" AnalyzeAllChildren="True" />
  <Target Name="$(ProjectDir)/src/ZoneInfoCompiler/bin/Debug/ZoneInfoCompiler.exe" Analyze="True" AnalyzeAllChildren="True" />
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\InteroperabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\MobilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\PortabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True" AllRulesEnabled="True" />
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="1.36">
  <Namespaces>
   <Namespace Name="NodaTime.Clocks">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2010-03-09 01:02:44Z">
      <Issue>
       <Item>NodaTime.Clocks</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="NodaTime.Converters">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2010-03-09 01:02:44Z">
      <Issue>
       <Item>NodaTime.Converters</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="NodaTime.Utility">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2010-03-09 01:02:44Z">
      <Issue>
       <Item>NodaTime.Utility</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="NodaTime.ZoneInfoCompiler.Tzdb">
    <Messages>
     <Message Id="Tzdb" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2010-03-09 01:02:44Z">
      <Issue Name="Namespace">
       <Item>Tzdb</Item>
       <Item>NodaTime.ZoneInfoCompiler.Tzdb</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="NodaTime.ZoneInfoCompiler.winmap">
    <Messages>
     <Message Id="winmap" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Created="2010-03-09 01:02:44Z">
      <Issue Name="Namespace">
       <Item>winmap</Item>
       <Item>NodaTime.ZoneInfoCompiler.winmap</Item>
       <Item>Winmap</Item>
      </Issue>
     </Message>
     <Message Id="winmap" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2010-03-09 01:02:44Z">
      <Issue Name="Namespace">
       <Item>winmap</Item>
       <Item>NodaTime.ZoneInfoCompiler.winmap</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
  </Namespaces>
  <Targets>
   <Target Name="$(ProjectDir)/src/NodaTime/bin/Debug/NodaTime.dll">
    <Modules>
     <Module Name="nodatime.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2010-03-09 01:02:44Z">
        <Issue Name="NoStrongName">
         <Item>'NodaTime.dll'</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="NodaTime">
        <Types>
         <Type Name="DateTimeComparer">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2010-03-09 01:02:44Z">
            <Issue>
             <Item>'DateTimeComparer'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="Duration">
          <Members>
           <Member Name="#Parse(System.String)">
            <Messages>
             <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2010-03-09 01:04:58Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'value'</Item>
               <Item>'Duration.Parse(string)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FieldValueException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2010-03-09 01:02:44Z">
            <Issue Name="MissingConstructor">
             <Item>'FieldValueException'</Item>
             <Item>protected FieldValueException(SerializationInfo, StreamingContext)</Item>
            </Issue>
            <Issue Name="MissingConstructor">
             <Item>'FieldValueException'</Item>
             <Item>public FieldValueException()</Item>
            </Issue>
            <Issue Name="MissingConstructor">
             <Item>'FieldValueException'</Item>
             <Item>public FieldValueException(String)</Item>
            </Issue>
            <Issue Name="MissingConstructor">
             <Item>'FieldValueException'</Item>
             <Item>public FieldValueException(String, Exception)</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Created="2010-03-09 01:02:44Z">
            <Issue Certainty="95" Level="Error">
             <Item>'FieldValueException'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#.ctor(NodaTime.Fields.DateTimeFieldType,System.Int32,System.Nullable`1&lt;System.Int64&gt;,System.Nullable`1&lt;System.Int64&gt;)">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'FieldValueException.FieldValueException(DateTimeFieldType, int, long?, long?)'</Item>
               <Item>'FieldValueException.stringValue'</Item>
               <Item>'string'</Item>
               <Item>null</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#.ctor(NodaTime.Fields.DateTimeFieldType,System.String)">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'FieldValueException.FieldValueException(DateTimeFieldType, string)'</Item>
               <Item>'FieldValueException.numberValue'</Item>
               <Item>'int'</Item>
               <Item>0</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#dateTimefieldType">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'FieldValueException.dateTimefieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#fieldName">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'FieldValueException.fieldName'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#numberValue">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'FieldValueException.numberValue'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrependMessage(System.String)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'FieldValueException.PrependMessage(string)'</Item>
              </Issue>
             </Message>
             <Message Id="message" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2010-03-09 01:02:44Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'message'</Item>
               <Item>'FieldValueException.PrependMessage(string)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#stringValue">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'FieldValueException.stringValue'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Interval">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2010-03-09 01:02:44Z">
            <Issue Name="Equals">
             <Item>'Interval'</Item>
            </Issue>
            <Issue Name="op_Equality">
             <Item>'Interval'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IPartial">
          <Members>
           <Member Name="#Get(NodaTime.Fields.DateTimeFieldType)">
            <Messages>
             <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
              <Issue Name="Member">
               <Item>'IPartial.Get(DateTimeFieldType)'</Item>
               <Item>Get</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IPeriod">
          <Members>
           <Member Name="#Get(NodaTime.Fields.DurationFieldType)">
            <Messages>
             <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
              <Issue Name="Member">
               <Item>'IPeriod.Get(DurationFieldType)'</Item>
               <Item>Get</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NodaConstants+Durations">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2010-03-09 01:02:44Z">
            <Issue>
             <Item>'NodaConstants.Durations'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="NodaTimePermission">
          <Messages>
           <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Created="2010-03-09 01:02:44Z">
            <Issue Name="TypeNoAlternate">
             <Item>'NodaTimePermission'</Item>
             <Item>Permission</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="SkippedTimeException">
          <Messages>
           <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Created="2010-03-09 01:04:58Z">
            <Issue>
             <Item>'SkippedTimeException'</Item>
            </Issue>
           </Message>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2010-03-09 01:02:44Z">
            <Issue Name="MissingConstructor">
             <Item>'SkippedTimeException'</Item>
             <Item>protected SkippedTimeException(SerializationInfo, StreamingContext)</Item>
            </Issue>
            <Issue Name="MissingConstructor">
             <Item>'SkippedTimeException'</Item>
             <Item>public SkippedTimeException()</Item>
            </Issue>
            <Issue Name="MissingConstructor">
             <Item>'SkippedTimeException'</Item>
             <Item>public SkippedTimeException(String)</Item>
            </Issue>
            <Issue Name="MissingConstructor">
             <Item>'SkippedTimeException'</Item>
             <Item>public SkippedTimeException(String, Exception)</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ZonedDateTime">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2010-03-09 01:02:44Z">
            <Issue Name="Equals">
             <Item>'ZonedDateTime'</Item>
            </Issue>
            <Issue Name="op_Equality">
             <Item>'ZonedDateTime'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="NodaTime.Calendars">
        <Types>
         <Type Name="AssembledCalendarSystem">
          <Members>
           <Member Name="#.ctor(System.String,NodaTime.Calendars.ICalendarSystem)">
            <Messages>
             <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Created="2010-03-09 01:04:58Z">
              <Issue>
               <Item>'AssembledCalendarSystem.AssembledCalendarSystem(string, ICalendarSystem)'</Item>
               <Item>&#xD;&#xA;&#xD;&#xA;AssembledCalendarSystem..ctor(String, ICalendarSystem)&#xD;&#xA;AssembledCalendarSystem.ConstructFields():FieldSet&#xD;&#xA;AssembledCalendarSystem.AssembleFields(FieldSet+Builder):Void</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2010-03-09 01:04:58Z">
              <Issue>
               <Item>'AssembledCalendarSystem.AssembledCalendarSystem(string, ICalendarSystem)'</Item>
               <Item>'AssembledCalendarSystem.useBaseTimeOfDayFields'</Item>
               <Item>'bool'</Item>
               <Item>false</Item>
              </Issue>
              <Issue>
               <Item>'AssembledCalendarSystem.AssembledCalendarSystem(string, ICalendarSystem)'</Item>
               <Item>'AssembledCalendarSystem.useBaseYearMonthDayFields'</Item>
               <Item>'bool'</Item>
               <Item>false</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="BasicCalendarSystem">
          <Members>
           <Member Name="#GetDayOfWeek(NodaTime.LocalInstant)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'BasicCalendarSystem.GetDayOfWeek(LocalInstant)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetDaysInMonthMax()">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'BasicCalendarSystem.GetDaysInMonthMax()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetDaysInYearMax()">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'BasicCalendarSystem.GetDaysInYearMax()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetMaxMonth()">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'BasicCalendarSystem.GetMaxMonth()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetTickOfDay(NodaTime.LocalInstant)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'BasicCalendarSystem.GetTickOfDay(LocalInstant)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="BasicGJCalendarSystem">
          <Members>
           <Member Name="#.cctor()">
            <Messages>
             <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'BasicGJCalendarSystem'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="GregorianCalendarSystem">
          <Members>
           <Member Name="#GetInstance(NodaTime.IDateTimeZone)">
            <Messages>
             <Message Id="dateTimeZone" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2010-03-09 01:02:44Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'dateTimeZone'</Item>
               <Item>'GregorianCalendarSystem.GetInstance(IDateTimeZone)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ICalendarSystem">
          <Members>
           <Member Name="#GetPartialValues(NodaTime.IPartial,NodaTime.LocalInstant)">
            <Messages>
             <Message Id="Partial" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'ICalendarSystem.GetPartialValues(IPartial, LocalInstant)'</Item>
               <Item>'partial'</Item>
               <Item>Partial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetPeriodValues(NodaTime.IPeriod,NodaTime.LocalInstant,NodaTime.LocalInstant)">
            <Messages>
             <Message Id="End" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'ICalendarSystem.GetPeriodValues(IPeriod, LocalInstant, LocalInstant)'</Item>
               <Item>'end'</Item>
               <Item>End</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#SetPartial(NodaTime.IPartial,NodaTime.LocalInstant)">
            <Messages>
             <Message Id="Partial" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'ICalendarSystem.SetPartial(IPartial, LocalInstant)'</Item>
               <Item>'partial'</Item>
               <Item>Partial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Validate(NodaTime.IPartial,System.Int32[])">
            <Messages>
             <Message Id="Partial" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'ICalendarSystem.Validate(IPartial, int[])'</Item>
               <Item>'partial'</Item>
               <Item>Partial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IsoCalendarSystem">
          <Members>
           <Member Name="#.cctor()">
            <Messages>
             <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'IsoCalendarSystem'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Instance">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'IsoCalendarSystem.Instance'</Item>
               <Item>'IsoCalendarSystem'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="NodaTime.Converters">
        <Types>
         <Type Name="ConverterManager">
          <Members>
           <Member Name="#AddInstantConverter(NodaTime.Converters.IInstantConverter)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'ConverterManager.AddInstantConverter(IInstantConverter)'</Item>
              </Issue>
             </Message>
             <Message Id="converter" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2010-03-09 01:02:44Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'converter'</Item>
               <Item>'ConverterManager.AddInstantConverter(IInstantConverter)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Instance">
            <Accessors>
             <Accessor Name="#get_Instance()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2010-03-09 01:02:44Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'ConverterManager.Instance.get()'</Item>
                 <Item>'NotImplementedException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="#RemoveInstantConverter(NodaTime.Converters.IInstantConverter)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'ConverterManager.RemoveInstantConverter(IInstantConverter)'</Item>
              </Issue>
             </Message>
             <Message Id="converter" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2010-03-09 01:02:44Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'converter'</Item>
               <Item>'ConverterManager.RemoveInstantConverter(IInstantConverter)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IConverter">
          <Members>
           <Member Name="#GetSupportedType()">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2010-03-09 01:02:44Z">
              <Issue Certainty="50">
               <Item>'IConverter.GetSupportedType()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IInstantConverter">
          <Members>
           <Member Name="#GetChronology(System.Object,NodaTime.Chronology)">
            <Messages>
             <Message Id="chrono" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'IInstantConverter.GetChronology(object, Chronology)'</Item>
               <Item>chrono</Item>
               <Item>'chrono'</Item>
              </Issue>
             </Message>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2010-03-09 01:02:44Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'IInstantConverter.GetChronology(object, Chronology)'</Item>
               <Item>obj</Item>
               <Item>'obj'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetChronology(System.Object,NodaTime.IDateTimeZone)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2010-03-09 01:02:44Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'IInstantConverter.GetChronology(object, IDateTimeZone)'</Item>
               <Item>obj</Item>
               <Item>'obj'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetInstantMilliseconds(System.Object,NodaTime.Chronology)">
            <Messages>
             <Message Id="chrono" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'IInstantConverter.GetInstantMilliseconds(object, Chronology)'</Item>
               <Item>chrono</Item>
               <Item>'chrono'</Item>
              </Issue>
             </Message>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2010-03-09 01:02:44Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'IInstantConverter.GetInstantMilliseconds(object, Chronology)'</Item>
               <Item>obj</Item>
               <Item>'obj'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="NodaTime.Fields">
        <Types>
         <Type Name="DateTimeFieldBase">
          <Members>
           <Member Name="#ConvertText(System.String,System.IFormatProvider)">
            <Messages>
             <Message Id="provider" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2010-03-09 01:02:44Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'provider'</Item>
               <Item>'DateTimeFieldBase.ConvertText(string, IFormatProvider)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeFieldType">
          <Members>
           <Member Name="#CenturyOfEra">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.CenturyOfEra'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ClockHourOfDay">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.ClockHourOfDay'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ClockHourOfHalfDay">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.ClockHourOfHalfDay'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#DayOfMonth">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.DayOfMonth'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#DayOfWeek">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.DayOfWeek'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#DayOfYear">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.DayOfYear'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Era">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.Era'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#HalfDayOfDay">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.HalfDayOfDay'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#HourOfDay">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.HourOfDay'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#HourOfHalfDay">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.HourOfHalfDay'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#MillisecondOfDay">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.MillisecondOfDay'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#MillisecondOfSecond">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.MillisecondOfSecond'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#MinuteOfDay">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.MinuteOfDay'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#MinuteOfHour">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.MinuteOfHour'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#MonthOfYear">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.MonthOfYear'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#SecondOfDay">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.SecondOfDay'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#SecondOfMinute">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.SecondOfMinute'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TickOfDay">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.TickOfDay'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TickOfMillisecond">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.TickOfMillisecond'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#WeekOfWeekYear">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.WeekOfWeekYear'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#WeekYear">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.WeekYear'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#WeekYearOfCentury">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.WeekYearOfCentury'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Year">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.Year'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#YearOfCentury">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.YearOfCentury'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#YearOfEra">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFieldType.YearOfEra'</Item>
               <Item>'DateTimeFieldType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DividedDateTimeField">
          <Members>
           <Member Name="#.ctor(NodaTime.Fields.RemainderDateTimeField,NodaTime.Fields.DateTimeFieldType)">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DividedDateTimeField.DividedDateTimeField(RemainderDateTimeField, DateTimeFieldType)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DurationField">
          <Messages>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2010-03-09 01:02:44Z">
            <Issue Name="Equals">
             <Item>'DurationField'</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'DurationField'</Item>
             <Item>!=</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'DurationField'</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'DurationField'</Item>
             <Item>==</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'DurationField'</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="FieldSet">
          <Members>
           <Member Name="#WithSupportedFieldsFrom(NodaTime.Fields.FieldSet)">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'FieldSet.WithSupportedFieldsFrom(FieldSet)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FieldSet+Builder">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2010-03-09 01:02:44Z">
            <Issue>
             <Item>'FieldSet.Builder'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="FieldUtils">
          <Messages>
           <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2010-03-09 01:02:44Z">
            <Issue Name="Type">
             <Item>Utils</Item>
             <Item>'FieldUtils'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#VerifyValueBounds(NodaTime.Fields.IDateTimeField,System.Int64,System.Int64,System.Int64)">
            <Messages>
             <Message Id="field" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'field'</Item>
               <Item>'FieldUtils.VerifyValueBounds(IDateTimeField, long, long, long)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IDateTimeField">
          <Members>
           <Member Name="#GetAsShortText(NodaTime.IPartial,System.IFormatProvider)">
            <Messages>
             <Message Id="Partial" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'IDateTimeField.GetAsShortText(IPartial, IFormatProvider)'</Item>
               <Item>'partial'</Item>
               <Item>Partial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetAsShortText(NodaTime.IPartial,System.Int32,System.IFormatProvider)">
            <Messages>
             <Message Id="Partial" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'IDateTimeField.GetAsShortText(IPartial, int, IFormatProvider)'</Item>
               <Item>'partial'</Item>
               <Item>Partial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetAsText(NodaTime.IPartial,System.IFormatProvider)">
            <Messages>
             <Message Id="Partial" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'IDateTimeField.GetAsText(IPartial, IFormatProvider)'</Item>
               <Item>'partial'</Item>
               <Item>Partial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetAsText(NodaTime.IPartial,System.Int32,System.IFormatProvider)">
            <Messages>
             <Message Id="Partial" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'IDateTimeField.GetAsText(IPartial, int, IFormatProvider)'</Item>
               <Item>'partial'</Item>
               <Item>Partial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetMaximumShortTextLength(System.IFormatProvider)">
            <Messages>
             <Message Id="short" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2010-03-09 01:02:44Z">
              <Issue Name="LanguageSpecificMember">
               <Item>Short</Item>
               <Item>'IDateTimeField.GetMaximumShortTextLength(IFormatProvider)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PreciseDurationDateTimeField">
          <Members>
           <Member Name="#GetMaximumValueForSet(NodaTime.LocalInstant,System.Int64)">
            <Messages>
             <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'value'</Item>
               <Item>'PreciseDurationDateTimeField.GetMaximumValueForSet(LocalInstant, long)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RemainderDateTimeField">
          <Members>
           <Member Name="#Divisor">
            <Accessors>
             <Accessor Name="#get_Divisor()">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2010-03-09 01:02:44Z">
                <Issue>
                 <Item>'RemainderDateTimeField.Divisor.get()'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="#RemainderRangeField">
            <Accessors>
             <Accessor Name="#get_RemainderRangeField()">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2010-03-09 01:02:44Z">
                <Issue>
                 <Item>'RemainderDateTimeField.RemainderRangeField.get()'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="UnsupportedDurationField">
          <Members>
           <Member Name="#ForFieldType(NodaTime.Fields.DurationFieldType)">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'UnsupportedDurationField.ForFieldType(DurationFieldType)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="NodaTime.Format">
        <Types>
         <Type Name="DateTimeFormatter">
          <Members>
           <Member Name="#.ctor(NodaTime.Format.IDateTimePrinter,NodaTime.Format.IDateTimeParser)">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFormatter.DateTimeFormatter(IDateTimePrinter, IDateTimeParser)'</Item>
               <Item>'DateTimeFormatter.calendarSystem'</Item>
               <Item>'ICalendarSystem'</Item>
               <Item>null</Item>
              </Issue>
              <Issue>
               <Item>'DateTimeFormatter.DateTimeFormatter(IDateTimePrinter, IDateTimeParser)'</Item>
               <Item>'DateTimeFormatter.offsetParsed'</Item>
               <Item>'bool'</Item>
               <Item>false</Item>
              </Issue>
              <Issue>
               <Item>'DateTimeFormatter.DateTimeFormatter(IDateTimePrinter, IDateTimeParser)'</Item>
               <Item>'DateTimeFormatter.provider'</Item>
               <Item>'IFormatProvider'</Item>
               <Item>null</Item>
              </Issue>
              <Issue>
               <Item>'DateTimeFormatter.DateTimeFormatter(IDateTimePrinter, IDateTimeParser)'</Item>
               <Item>'DateTimeFormatter.zone'</Item>
               <Item>'IDateTimeZone'</Item>
               <Item>null</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrintTo(System.Text.StringBuilder,NodaTime.IPartial)">
            <Messages>
             <Message Id="System.IO.StringWriter.#ctor(System.Text.StringBuilder)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'StringWriter.StringWriter(StringBuilder)'</Item>
               <Item>'DateTimeFormatter.PrintTo(StringBuilder, IPartial)'</Item>
               <Item>'StringWriter.StringWriter(StringBuilder, IFormatProvider)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrintTo(System.Text.StringBuilder,NodaTime.ZonedDateTime)">
            <Messages>
             <Message Id="System.IO.StringWriter.#ctor(System.Text.StringBuilder)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'StringWriter.StringWriter(StringBuilder)'</Item>
               <Item>'DateTimeFormatter.PrintTo(StringBuilder, ZonedDateTime)'</Item>
               <Item>'StringWriter.StringWriter(StringBuilder, IFormatProvider)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeFormatterBuilder">
          <Members>
           <Member Name="#AppendDecimal(NodaTime.Fields.DateTimeFieldType,System.Int32,System.Int32)">
            <Messages>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2010-03-09 01:02:44Z">
              <Issue Name="NoArguments">
               <Item>'ArgumentException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#AppendFixedDecimal(NodaTime.Fields.DateTimeFieldType,System.Int32)">
            <Messages>
             <Message Id="num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'DateTimeFormatterBuilder.AppendFixedDecimal(DateTimeFieldType, int)'</Item>
               <Item>num</Item>
               <Item>'numDigits'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#AppendFixedSignedDecimal(NodaTime.Fields.DateTimeFieldType,System.Int32)">
            <Messages>
             <Message Id="num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'DateTimeFormatterBuilder.AppendFixedSignedDecimal(DateTimeFieldType, int)'</Item>
               <Item>num</Item>
               <Item>'numDigits'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#AppendSignedDecimal(NodaTime.Fields.DateTimeFieldType,System.Int32,System.Int32)">
            <Messages>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2010-03-09 01:02:44Z">
              <Issue Name="NoArguments">
               <Item>'ArgumentException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Guard(System.Int32,System.Int32)">
            <Messages>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2010-03-09 01:02:44Z">
              <Issue Name="NoArguments">
               <Item>'ArgumentException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#IsParser(System.Object)">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2010-03-09 01:02:44Z">
              <Issue Name="Parameter">
               <Item>'object'</Item>
               <Item>'DateTimeFormatterBuilder.Composite'</Item>
               <Item>'DateTimeFormatterBuilder.IsParser(object)'</Item>
               <Item>castclass</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'DateTimeFormatterBuilder.IsParser(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#IsPrinter(System.Object)">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2010-03-09 01:02:44Z">
              <Issue Name="Parameter">
               <Item>'object'</Item>
               <Item>'DateTimeFormatterBuilder.Composite'</Item>
               <Item>'DateTimeFormatterBuilder.IsPrinter(object)'</Item>
               <Item>castclass</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'DateTimeFormatterBuilder.IsPrinter(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeFormatterBuilder+Composite">
          <Members>
           <Member Name="#.ctor(System.Collections.Generic.List`1&lt;System.Object&gt;)">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFormatterBuilder.Composite.Composite(List&lt;object&gt;)'</Item>
               <Item>'DateTimeFormatterBuilder.Composite.parsers'</Item>
               <Item>'IDateTimeParser[]'</Item>
               <Item>null</Item>
              </Issue>
              <Issue>
               <Item>'DateTimeFormatterBuilder.Composite.Composite(List&lt;object&gt;)'</Item>
               <Item>'DateTimeFormatterBuilder.Composite.printers'</Item>
               <Item>'IDateTimePrinter[]'</Item>
               <Item>null</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Decompose(System.Collections.Generic.List`1&lt;System.Object&gt;,System.Collections.Generic.List`1&lt;NodaTime.Format.IDateTimePrinter&gt;,System.Collections.Generic.List`1&lt;NodaTime.Format.IDateTimeParser&gt;)">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2010-03-09 01:02:44Z">
              <Issue Name="Local">
               <Item>'element'</Item>
               <Item>'DateTimeFormatterBuilder.Composite'</Item>
               <Item>'DateTimeFormatterBuilder.Composite.Decompose(List&lt;object&gt;, List&lt;IDateTimePrinter&gt;, List&lt;IDateTimeParser&gt;)'</Item>
               <Item>castclass</Item>
              </Issue>
              <Issue Name="Local">
               <Item>'element'</Item>
               <Item>'DateTimeFormatterBuilder.Composite'</Item>
               <Item>'DateTimeFormatterBuilder.Composite.Decompose(List&lt;object&gt;, List&lt;IDateTimePrinter&gt;, List&lt;IDateTimeParser&gt;)'</Item>
               <Item>castclass</Item>
              </Issue>
              <Issue Name="Local">
               <Item>'element'</Item>
               <Item>'IDateTimeParser'</Item>
               <Item>'DateTimeFormatterBuilder.Composite.Decompose(List&lt;object&gt;, List&lt;IDateTimePrinter&gt;, List&lt;IDateTimeParser&gt;)'</Item>
               <Item>isint</Item>
              </Issue>
              <Issue Name="Local">
               <Item>'element'</Item>
               <Item>'IDateTimePrinter'</Item>
               <Item>'DateTimeFormatterBuilder.Composite.Decompose(List&lt;object&gt;, List&lt;IDateTimePrinter&gt;, List&lt;IDateTimeParser&gt;)'</Item>
               <Item>isint</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeFormatterBuilder+Fraction">
          <Members>
           <Member Name="#Print(System.IO.TextWriter,NodaTime.LocalInstant,NodaTime.Calendars.ICalendarSystem)">
            <Messages>
             <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFormatterBuilder.Fraction.Print(TextWriter, LocalInstant, ICalendarSystem)'</Item>
               <Item>'SystemException'</Item>
              </Issue>
             </Message>
             <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'long.ToString()'</Item>
               <Item>'DateTimeFormatterBuilder.Fraction.Print(TextWriter, LocalInstant, ICalendarSystem)'</Item>
               <Item>'long.ToString(IFormatProvider)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeFormatterBuilder+NumberFormatter">
          <Members>
           <Member Name="#ParseInto(NodaTime.Format.DateTimeParserBucket,System.String,System.Int32)">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'int.Parse(string)'</Item>
               <Item>'DateTimeFormatterBuilder.NumberFormatter.ParseInto(DateTimeParserBucket, string, int)'</Item>
               <Item>'int.Parse(string, IFormatProvider)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeFormatterBuilder+PaddedNumber">
          <Members>
           <Member Name="#PrintTo(System.IO.TextWriter,NodaTime.IPartial,System.IFormatProvider)">
            <Messages>
             <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFormatterBuilder.PaddedNumber.PrintTo(TextWriter, IPartial, IFormatProvider)'</Item>
               <Item>'SystemException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrintTo(System.IO.TextWriter,NodaTime.LocalInstant,NodaTime.Calendars.ICalendarSystem,NodaTime.Offset,NodaTime.IDateTimeZone,System.IFormatProvider)">
            <Messages>
             <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFormatterBuilder.PaddedNumber.PrintTo(TextWriter, LocalInstant, ICalendarSystem, Offset, IDateTimeZone, IFormatProvider)'</Item>
               <Item>'SystemException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeFormatterBuilder+TextField">
          <Members>
           <Member Name="#PrintTo(System.IO.TextWriter,NodaTime.IPartial,System.IFormatProvider)">
            <Messages>
             <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFormatterBuilder.TextField.PrintTo(TextWriter, IPartial, IFormatProvider)'</Item>
               <Item>'SystemException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrintTo(System.IO.TextWriter,NodaTime.LocalInstant,NodaTime.Calendars.ICalendarSystem,NodaTime.Offset,NodaTime.IDateTimeZone,System.IFormatProvider)">
            <Messages>
             <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFormatterBuilder.TextField.PrintTo(TextWriter, LocalInstant, ICalendarSystem, Offset, IDateTimeZone, IFormatProvider)'</Item>
               <Item>'SystemException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeFormatterBuilder+TimeZoneName">
          <Members>
           <Member Name="#Print(NodaTime.Instant,NodaTime.IDateTimeZone,System.IFormatProvider)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'DateTimeFormatterBuilder.TimeZoneName.Print(Instant, IDateTimeZone, IFormatProvider)'</Item>
              </Issue>
             </Message>
             <Message Id="instant" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'instant'</Item>
               <Item>'DateTimeFormatterBuilder.TimeZoneName.Print(Instant, IDateTimeZone, IFormatProvider)'</Item>
              </Issue>
             </Message>
             <Message Id="provider" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'provider'</Item>
               <Item>'DateTimeFormatterBuilder.TimeZoneName.Print(Instant, IDateTimeZone, IFormatProvider)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeFormatterBuilder+TimeZoneOffset">
          <Members>
           <Member Name="#.ctor(System.String,System.Boolean,System.Int32,System.Int32)">
            <Messages>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2010-03-09 01:02:44Z">
              <Issue Name="NoArguments">
               <Item>'ArgumentException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#DigitCount(System.String,System.Int32,System.Int32)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'DateTimeFormatterBuilder.TimeZoneOffset.DigitCount(string, int, int)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeFormatterBuilder+TwoDigitYear">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2010-03-09 01:02:44Z">
            <Issue>
             <Item>'DateTimeFormatterBuilder.TwoDigitYear'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#GetTwoDigitYear(NodaTime.IPartial)">
            <Messages>
             <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFormatterBuilder.TwoDigitYear.GetTwoDigitYear(IPartial)'</Item>
               <Item>'SystemException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetTwoDigitYear(NodaTime.LocalInstant,NodaTime.Calendars.ICalendarSystem)">
            <Messages>
             <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFormatterBuilder.TwoDigitYear.GetTwoDigitYear(LocalInstant, ICalendarSystem)'</Item>
               <Item>'SystemException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ParseInto(NodaTime.Format.DateTimeParserBucket,System.String,System.Int32)">
            <Messages>
             <Message Id="e" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFormatterBuilder.TwoDigitYear.ParseInto(DateTimeParserBucket, string, int)'</Item>
               <Item>'e'</Item>
               <Item>'IndexOutOfRangeException'</Item>
              </Issue>
             </Message>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'int.Parse(string)'</Item>
               <Item>'DateTimeFormatterBuilder.TwoDigitYear.ParseInto(DateTimeParserBucket, string, int)'</Item>
               <Item>'int.Parse(string, IFormatProvider)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#WriteYear(System.IO.TextWriter,System.Int32)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'DateTimeFormatterBuilder.TwoDigitYear.WriteYear(TextWriter, int)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeFormatterBuilder+UnpaddedNumber">
          <Members>
           <Member Name="#PrintTo(System.IO.TextWriter,NodaTime.IPartial,System.IFormatProvider)">
            <Messages>
             <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFormatterBuilder.UnpaddedNumber.PrintTo(TextWriter, IPartial, IFormatProvider)'</Item>
               <Item>'SystemException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrintTo(System.IO.TextWriter,NodaTime.LocalInstant,NodaTime.Calendars.ICalendarSystem,NodaTime.Offset,NodaTime.IDateTimeZone,System.IFormatProvider)">
            <Messages>
             <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeFormatterBuilder.UnpaddedNumber.PrintTo(TextWriter, LocalInstant, ICalendarSystem, Offset, IDateTimeZone, IFormatProvider)'</Item>
               <Item>'SystemException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeParserBucket">
          <Members>
           <Member Name="#RestoreState(System.Object)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'DateTimeParserBucket.RestoreState(object)'</Item>
              </Issue>
             </Message>
             <Message Id="state" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2010-03-09 01:02:44Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'state'</Item>
               <Item>'DateTimeParserBucket.RestoreState(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#savedFieldsState">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'DateTimeParserBucket.savedFieldsState'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#SaveState()">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'DateTimeParserBucket.SaveState()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DateTimeParserBucket+SavedField">
          <Members>
           <Member Name="#CompareReverse(NodaTime.Fields.DurationField,NodaTime.Fields.DurationField)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'DateTimeParserBucket.SavedField.CompareReverse(DurationField, DurationField)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FormatUtils">
          <Members>
           <Member Name="#WriteUnknownString(System.IO.TextWriter)">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'FormatUtils.WriteUnknownString(TextWriter)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IDateTimePrinter">
          <Members>
           <Member Name="#PrintTo(System.IO.TextWriter,NodaTime.IPartial,System.IFormatProvider)">
            <Messages>
             <Message Id="Partial" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'IDateTimePrinter.PrintTo(TextWriter, IPartial, IFormatProvider)'</Item>
               <Item>'partial'</Item>
               <Item>Partial</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrintTo(System.IO.TextWriter,NodaTime.LocalInstant,NodaTime.Calendars.ICalendarSystem,NodaTime.Offset,NodaTime.IDateTimeZone,System.IFormatProvider)">
            <Messages>
             <Message Id="timezone" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberParameter">
               <Item>'IDateTimePrinter.PrintTo(TextWriter, LocalInstant, ICalendarSystem, Offset, IDateTimeZone, IFormatProvider)'</Item>
               <Item>timezone</Item>
               <Item>'timezoneOffset'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IPeriodParser">
          <Members>
           <Member Name="#Parse(System.String,System.Int32,NodaTime.Format.PeriodBuilder,System.IFormatProvider)">
            <Messages>
             <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2010-03-09 01:02:44Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'IPeriodParser.Parse(string, int, PeriodBuilder, IFormatProvider)'</Item>
               <Item>String</Item>
               <Item>'periodString'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IPeriodPrinter">
          <Members>
           <Member Name="#PrintTo(System.Text.StringBuilder,NodaTime.IPeriod,System.IFormatProvider)">
            <Messages>
             <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2010-03-09 01:02:44Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'IPeriodPrinter.PrintTo(StringBuilder, IPeriod, IFormatProvider)'</Item>
               <Item>string</Item>
               <Item>'stringBuilder'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IsoDateTimeFormats">
          <Members>
           <Member Name="#dhmsf">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'IsoDateTimeFormats.dhmsf'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#WeekYearWeekDay">
            <Messages>
             <Message Id="WeekDay" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberShouldBeDiscreteTerm">
               <Item>WeekDay</Item>
               <Item>'IsoDateTimeFormats.WeekYearWeekDay'</Item>
               <Item>Weekday</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PeriodFormatter">
          <Members>
           <Member Name="#PrintTo(System.Text.StringBuilder,NodaTime.IPeriod)">
            <Messages>
             <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2010-03-09 01:02:44Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'PeriodFormatter.PrintTo(StringBuilder, IPeriod)'</Item>
               <Item>string</Item>
               <Item>'stringBuilder'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PeriodFormatterBuilder">
          <Members>
           <Member Name="#AppendSuffix(System.String)">
            <Messages>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2010-03-09 01:02:44Z">
              <Issue Name="NoArguments">
               <Item>'ArgumentNullException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Decompose(System.Collections.IList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2010-03-09 01:02:44Z">
              <Issue Name="Local">
               <Item>'firstItem'</Item>
               <Item>'PeriodFormatterBuilder.Composite'</Item>
               <Item>'PeriodFormatterBuilder.Decompose(IList, ArrayList, ArrayList)'</Item>
               <Item>castclass</Item>
              </Issue>
              <Issue Name="Local">
               <Item>'secondItem'</Item>
               <Item>'PeriodFormatterBuilder.Composite'</Item>
               <Item>'PeriodFormatterBuilder.Decompose(IList, ArrayList, ArrayList)'</Item>
               <Item>castclass</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PeriodFormatterBuilder+FieldFormatter">
          <Members>
           <Member Name="#ParseInt(System.String,System.Int32,System.Int32)">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'int.Parse(string)'</Item>
               <Item>'PeriodFormatterBuilder.FieldFormatter.ParseInt(string, int, int)'</Item>
               <Item>'int.Parse(string, IFormatProvider)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PeriodFormatterBuilder+PluralAffix">
          <Members>
           <Member Name="#Scan(System.String,System.Int32)">
            <Messages>
             <Message Id="newPosition" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'PeriodFormatterBuilder.PluralAffix.Scan(string, int)'</Item>
               <Item>'newPosition'</Item>
               <Item>'int'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PeriodFormatterBuilder+Separator">
          <Members>
           <Member Name="#.ctor(System.String,System.String,System.String[],NodaTime.Format.IPeriodPrinter,NodaTime.Format.IPeriodParser,System.Boolean,System.Boolean)">
            <Messages>
             <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'PeriodFormatterBuilder.Separator.Separator(string, string, string[], IPeriodPrinter, IPeriodParser, bool, bool)'</Item>
               <Item>'string.CompareTo(string)'</Item>
               <Item>'string.Compare(string, string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="NodaTime.Partials">
        <Types>
         <Type Name="LocalDate">
          <Members>
           <Member Name="#Calendar">
            <Accessors>
             <Accessor Name="#get_Calendar()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2010-03-09 01:02:44Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'LocalDate.Calendar.get()'</Item>
                 <Item>'NotImplementedException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="#Size">
            <Accessors>
             <Accessor Name="#get_Size()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2010-03-09 01:02:44Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'LocalDate.Size.get()'</Item>
                 <Item>'NotImplementedException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="LocalTime">
          <Members>
           <Member Name="#Calendar">
            <Accessors>
             <Accessor Name="#get_Calendar()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2010-03-09 01:02:44Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'LocalTime.Calendar.get()'</Item>
                 <Item>'NotImplementedException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="#Size">
            <Accessors>
             <Accessor Name="#get_Size()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2010-03-09 01:02:44Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'LocalTime.Size.get()'</Item>
                 <Item>'NotImplementedException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="MonthDay">
          <Members>
           <Member Name="#Size">
            <Accessors>
             <Accessor Name="#get_Size()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2010-03-09 01:02:44Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'MonthDay.Size.get()'</Item>
                 <Item>'NotImplementedException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="Partial">
          <Messages>
           <Message Id="Partial" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
            <Issue Name="Type">
             <Item>'Partial'</Item>
             <Item>Partial</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#values">
            <Messages>
             <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'Partial.values'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PartialUtils">
          <Messages>
           <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2010-03-09 01:02:44Z">
            <Issue Name="Type">
             <Item>Utils</Item>
             <Item>'PartialUtils'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="YearMonth">
          <Members>
           <Member Name="#Size">
            <Accessors>
             <Accessor Name="#get_Size()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2010-03-09 01:02:44Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'YearMonth.Size.get()'</Item>
                 <Item>'NotImplementedException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="NodaTime.Periods">
        <Types>
         <Type Name="Days">
          <Members>
           <Member Name="#op_Decrement(NodaTime.Periods.Days)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Decrement</Item>
               <Item>'Days.operator --(Days)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Increment(NodaTime.Periods.Days)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Increment</Item>
               <Item>'Days.operator ++(Days)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_UnaryPlus(NodaTime.Periods.Days)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Plus</Item>
               <Item>'Days.operator +(Days)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Hours">
          <Members>
           <Member Name="#op_Decrement(NodaTime.Periods.Hours)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Decrement</Item>
               <Item>'Hours.operator --(Hours)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Increment(NodaTime.Periods.Hours)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Increment</Item>
               <Item>'Hours.operator ++(Hours)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_UnaryPlus(NodaTime.Periods.Hours)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Plus</Item>
               <Item>'Hours.operator +(Hours)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Minutes">
          <Members>
           <Member Name="#op_Decrement(NodaTime.Periods.Minutes)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Decrement</Item>
               <Item>'Minutes.operator --(Minutes)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Increment(NodaTime.Periods.Minutes)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Increment</Item>
               <Item>'Minutes.operator ++(Minutes)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_UnaryPlus(NodaTime.Periods.Minutes)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Plus</Item>
               <Item>'Minutes.operator +(Minutes)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Months">
          <Members>
           <Member Name="#op_Decrement(NodaTime.Periods.Months)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Decrement</Item>
               <Item>'Months.operator --(Months)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Increment(NodaTime.Periods.Months)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Increment</Item>
               <Item>'Months.operator ++(Months)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_UnaryPlus(NodaTime.Periods.Months)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Plus</Item>
               <Item>'Months.operator +(Months)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PeriodType">
          <Members>
           <Member Name="#DayTime">
            <Messages>
             <Message Id="DayTime" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberShouldBeDiscreteTerm">
               <Item>DayTime</Item>
               <Item>'PeriodType.DayTime'</Item>
               <Item>Daytime</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#YearDayTime">
            <Messages>
             <Message Id="DayTime" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberShouldBeDiscreteTerm">
               <Item>DayTime</Item>
               <Item>'PeriodType.YearDayTime'</Item>
               <Item>Daytime</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#YearMonthDayTime">
            <Messages>
             <Message Id="DayTime" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberShouldBeDiscreteTerm">
               <Item>DayTime</Item>
               <Item>'PeriodType.YearMonthDayTime'</Item>
               <Item>Daytime</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#YearWeekDay">
            <Messages>
             <Message Id="WeekDay" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberShouldBeDiscreteTerm">
               <Item>WeekDay</Item>
               <Item>'PeriodType.YearWeekDay'</Item>
               <Item>Weekday</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#YearWeekDayTime">
            <Messages>
             <Message Id="DayTime" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberShouldBeDiscreteTerm">
               <Item>DayTime</Item>
               <Item>'PeriodType.YearWeekDayTime'</Item>
               <Item>Daytime</Item>
              </Issue>
             </Message>
             <Message Id="WeekDay" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Created="2010-03-09 01:02:44Z">
              <Issue Name="MemberShouldBeDiscreteTerm">
               <Item>WeekDay</Item>
               <Item>'PeriodType.YearWeekDayTime'</Item>
               <Item>Weekday</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Seconds">
          <Members>
           <Member Name="#op_Decrement(NodaTime.Periods.Seconds)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Decrement</Item>
               <Item>'Seconds.operator --(Seconds)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Increment(NodaTime.Periods.Seconds)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Increment</Item>
               <Item>'Seconds.operator ++(Seconds)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_UnaryPlus(NodaTime.Periods.Seconds)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Plus</Item>
               <Item>'Seconds.operator +(Seconds)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SingleFieldPeriodBase">
          <Messages>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2010-03-09 01:02:44Z">
            <Issue Name="Operator">
             <Item>'SingleFieldPeriodBase'</Item>
             <Item>!=</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'SingleFieldPeriodBase'</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'SingleFieldPeriodBase'</Item>
             <Item>==</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'SingleFieldPeriodBase'</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#FieldType">
            <Messages>
             <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue Name="SameType">
               <Item>'SingleFieldPeriodBase.FieldType'</Item>
               <Item>'SingleFieldPeriodBase.GetFieldType(int)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Value">
            <Messages>
             <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue Name="SameType">
               <Item>'SingleFieldPeriodBase.Value'</Item>
               <Item>'SingleFieldPeriodBase.GetValue(int)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Weeks">
          <Members>
           <Member Name="#op_Decrement(NodaTime.Periods.Weeks)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Decrement</Item>
               <Item>'Weeks.operator --(Weeks)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Increment(NodaTime.Periods.Weeks)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Increment</Item>
               <Item>'Weeks.operator ++(Weeks)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_UnaryPlus(NodaTime.Periods.Weeks)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Plus</Item>
               <Item>'Weeks.operator +(Weeks)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Years">
          <Members>
           <Member Name="#op_Decrement(NodaTime.Periods.Years)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Decrement</Item>
               <Item>'Years.operator --(Years)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Increment(NodaTime.Periods.Years)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Increment</Item>
               <Item>'Years.operator ++(Years)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_UnaryPlus(NodaTime.Periods.Years)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>Plus</Item>
               <Item>'Years.operator +(Years)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="NodaTime.TimeZones">
        <Types>
         <Type Name="CachedDateTimeZone+CacheType">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2010-03-09 01:04:58Z">
            <Issue>
             <Item>'CachedDateTimeZone.CacheType'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/src/ZoneInfoCompiler/bin/Debug/ZoneInfoCompiler.exe">
    <Modules>
     <Module Name="zoneinfocompiler.exe">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2010-03-09 01:02:44Z">
        <Issue Name="NoStrongName">
         <Item>'ZoneInfoCompiler.exe'</Item>
        </Issue>
       </Message>
       <Message TypeName="MarkWindowsFormsEntryPointsWithStaThread" Category="Microsoft.Usage" CheckId="CA2232" Created="2010-03-09 01:02:44Z">
        <Issue>
         <Item>'ZoneInfoCompiler.Main(string[])'</Item>
         <Item>'ZoneInfoCompiler.exe'</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="NodaTime.ZoneInfoCompiler">
        <Types>
         <Type Name="ILog">
          <Members>
           <Member Name="#Error(System.String,System.Object[])">
            <Messages>
             <Message Id="Error" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2010-03-09 01:02:44Z">
              <Issue Name="Member">
               <Item>'ILog.Error(string, params object[])'</Item>
               <Item>Error</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ResourceOutput">
          <Members>
           <Member Name="#Dispose()">
            <Messages>
             <Message Id="memory" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'ResourceOutput'</Item>
               <Item>'ResourceOutput.memory'</Item>
               <Item>'MemoryStream'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetResourceWriter(System.String,NodaTime.ZoneInfoCompiler.ResourceOutputType)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'ResourceOutput.GetResourceWriter(string, ResourceOutputType)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Tokens">
          <Members>
           <Member Name="#Tokenize(System.String)">
            <Messages>
             <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Created="2010-03-09 01:02:44Z">
              <Issue Name="IsNullOrEmpty">
               <Item>'string.operator ==(string, string)'</Item>
               <Item>'Tokens.Tokenize(string)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="NodaTime.ZoneInfoCompiler.Tzdb">
        <Types>
         <Type Name="MissingTokenException">
          <Messages>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2010-03-09 01:02:44Z">
            <Issue Name="MissingConstructor">
             <Item>'MissingTokenException'</Item>
             <Item>protected MissingTokenException(SerializationInfo, StreamingContext)</Item>
            </Issue>
            <Issue Name="MissingConstructor">
             <Item>'MissingTokenException'</Item>
             <Item>public MissingTokenException()</Item>
            </Issue>
            <Issue Name="MissingConstructor">
             <Item>'MissingTokenException'</Item>
             <Item>public MissingTokenException(String, Exception)</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Created="2010-03-09 01:02:44Z">
            <Issue Certainty="95" Level="Error">
             <Item>'MissingTokenException'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ParserHelper">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2010-03-09 01:02:44Z">
            <Issue>
             <Item>'ParserHelper'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#ParseOffset(System.String)">
            <Messages>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2010-03-09 01:02:44Z">
              <Issue Name="IncorrectParameterName">
               <Item>'ParserHelper.ParseOffset(string)'</Item>
               <Item>value cannot be null</Item>
               <Item>'paramName'</Item>
               <Item>'ArgumentNullException'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'ParserHelper.ParseOffset(string)'</Item>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ParseOptional(System.String)">
            <Messages>
             <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Created="2010-03-09 01:02:44Z">
              <Issue Name="IncorrectParameterName">
               <Item>'ParserHelper.ParseOptional(string)'</Item>
               <Item>value cannot be null</Item>
               <Item>'paramName'</Item>
               <Item>'ArgumentNullException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ParseYear(System.String,System.Int32)">
            <Messages>
             <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Created="2010-03-09 01:02:44Z">
              <Issue Name="ToUpperInvariant">
               <Item>'ParserHelper.ParseYear(string, int)'</Item>
               <Item>'string.ToLowerInvariant()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TzdbCompilerOptions">
          <Members>
           <Member Name="#.ctor()">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'TzdbCompilerOptions.TzdbCompilerOptions()'</Item>
               <Item>'TzdbCompilerOptions.InputFiles'</Item>
               <Item>'IList&lt;string&gt;'</Item>
               <Item>null</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetUsage()">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'TzdbCompilerOptions.GetUsage()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TzdbDatabase">
          <Members>
           <Member Name="#AddZone(NodaTime.ZoneInfoCompiler.Tzdb.Zone)">
            <Messages>
             <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Created="2010-03-09 01:02:44Z">
              <Issue Name="IsNullOrEmpty">
               <Item>'string.operator ==(string, string)'</Item>
               <Item>'TzdbDatabase.AddZone(Zone)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TzdbZoneInfoCompiler">
          <Members>
           <Member Name="#AddRecurring(NodaTime.TimeZones.DateTimeZoneBuilder,System.String,System.Collections.Generic.IList`1&lt;NodaTime.ZoneInfoCompiler.Tzdb.ZoneRule&gt;)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'TzdbZoneInfoCompiler.AddRecurring(DateTimeZoneBuilder, string, IList&lt;ZoneRule&gt;)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ValidateArguments(System.IO.DirectoryInfo,System.Collections.Generic.IEnumerable`1&lt;System.IO.FileInfo&gt;,System.IO.FileInfo)">
            <Messages>
             <Message Id="target" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'target'</Item>
               <Item>'TzdbZoneInfoCompiler.ValidateArguments(DirectoryInfo, IEnumerable&lt;FileInfo&gt;, FileInfo)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ValidateExistingDirectory(System.IO.DirectoryInfo,System.String)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'TzdbZoneInfoCompiler.ValidateExistingDirectory(DirectoryInfo, string)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TzdbZoneInfoParser">
          <Members>
           <Member Name="#Informational(System.String,System.Object[])">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'TzdbZoneInfoParser.Informational(string, params object[])'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#NextInteger(NodaTime.ZoneInfoCompiler.Tokens,System.String)">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'TzdbZoneInfoParser.NextInteger(Tokens, string)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#NextInteger(NodaTime.ZoneInfoCompiler.Tokens,System.String,System.Int32)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'TzdbZoneInfoParser.NextInteger(Tokens, string, int)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#NextOffset(NodaTime.ZoneInfoCompiler.Tokens,System.String,NodaTime.Offset)">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'TzdbZoneInfoParser.NextOffset(Tokens, string, Offset)'</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'TzdbZoneInfoParser.NextOffset(Tokens, string, Offset)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#NextString(NodaTime.ZoneInfoCompiler.Tokens,System.String,System.String)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'TzdbZoneInfoParser.NextString(Tokens, string, string)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#NextYear(NodaTime.ZoneInfoCompiler.Tokens,System.String,System.Int32)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'TzdbZoneInfoParser.NextYear(Tokens, string, int)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Parse(System.IO.TextReader,NodaTime.ZoneInfoCompiler.Tzdb.TzdbDatabase)">
            <Messages>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'TzdbZoneInfoParser.Parse(TextReader, TzdbDatabase)'</Item>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ParseDayOfWeek(System.String)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'TzdbZoneInfoParser.ParseDayOfWeek(string)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ParseLine(System.String,NodaTime.ZoneInfoCompiler.Tzdb.TzdbDatabase)">
            <Messages>
             <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Created="2010-03-09 01:02:44Z">
              <Issue Name="IsNullOrEmpty">
               <Item>'string.operator ==(string, string)'</Item>
               <Item>'TzdbZoneInfoParser.ParseLine(string, TzdbDatabase)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ParseMonth(System.String)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'TzdbZoneInfoParser.ParseMonth(string)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ParseRule(NodaTime.ZoneInfoCompiler.Tokens)">
            <Messages>
             <Message Id="type" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'TzdbZoneInfoParser.ParseRule(Tokens)'</Item>
               <Item>'type'</Item>
               <Item>'string'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Warning(System.String,System.Object[])">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'TzdbZoneInfoParser.Warning(string, params object[])'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TzdbZoneInfoParser+ParseException">
          <Messages>
           <Message TypeName="ExceptionsShouldBePublic" Category="Microsoft.Design" CheckId="CA1064" Created="2010-03-09 01:02:44Z">
            <Issue>
             <Item>'TzdbZoneInfoParser.ParseException'</Item>
            </Issue>
           </Message>
           <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Created="2010-03-09 01:02:44Z">
            <Issue Name="MissingConstructor">
             <Item>'TzdbZoneInfoParser.ParseException'</Item>
             <Item>protected ParseException(SerializationInfo, StreamingContext)</Item>
            </Issue>
           </Message>
           <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Created="2010-03-09 01:02:44Z">
            <Issue Certainty="95" Level="Error">
             <Item>'TzdbZoneInfoParser.ParseException'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="Zone">
          <Members>
           <Member Name="#Equals(System.Object)">
            <Messages>
             <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Created="2010-03-09 01:02:44Z">
              <Issue Name="Parameter">
               <Item>'obj'</Item>
               <Item>'Zone'</Item>
               <Item>'Zone.Equals(object)'</Item>
               <Item>castclass</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="NodaTime.ZoneInfoCompiler.winmap">
        <Types>
         <Type Name="WindowsMapperCompiler">
          <Members>
           <Member Name="#ReadInput(System.IO.FileInfo)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2010-03-09 01:02:44Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'WindowsMapperCompiler.ReadInput(FileInfo)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="WindowsMapperCompilerOptions">
          <Members>
           <Member Name="#GetUsage()">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2010-03-09 01:02:44Z">
              <Issue>
               <Item>'WindowsMapperCompilerOptions.GetUsage()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Rules>
   <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
    <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   </Rule>
   <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
    <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
    <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
    <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
    <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   </Rule>
   <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
    <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   </Rule>
   <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
    <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   </Rule>
   <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
    <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   </Rule>
   <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
    <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
    <Resolution Name="Parameter">{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   </Rule>
   <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
    <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104">
    <Resolution Name="Default">Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message.</Resolution>
   </Rule>
   <Rule TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805">
    <Resolution Name="Default">{0} initializes field {1} of type {2} to {3}. Remove this initialization because it will be done automatically by the runtime.</Resolution>
   </Rule>
   <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
    <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   </Rule>
   <Rule TypeName="ExceptionsShouldBePublic" Category="Microsoft.Design" CheckId="CA1064">
    <Resolution Name="Default">Make exception class {0} public.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
    <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
    <Resolution Name="Namespace">Correct the casing of '{0}' in namespace name '{1}' by changing it to '{2}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
    <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
    <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
    <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
    <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
    <Resolution Name="LanguageSpecificMember">Consider replacing the language-specific data type identifier '{0}' in member name {1} with either a language-independent equivalent or a more generic term, such as 'value'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
    <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
    <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
    <Resolution Name="MemberParameter">In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
    <Resolution Name="Type">Rename type {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Resolution>
   </Rule>
   <Rule TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240">
    <Resolution Name="Default">Add an implementation of GetObjectData to type {0}.</Resolution>
   </Rule>
   <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
    <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   </Rule>
   <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
    <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   </Rule>
   <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
    <Resolution Name="IncorrectParameterName">Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
    <Resolution Name="NoArguments">Call the {0} constructor that contains a message and/or paramName parameter.</Resolution>
   </Rule>
   <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
    <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   </Rule>
   <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
    <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   </Rule>
   <Rule TypeName="MarkWindowsFormsEntryPointsWithStaThread" Category="Microsoft.Usage" CheckId="CA2232">
    <Resolution Name="Default">Mark the entry point method {0} in assembly {1} with an STAThreadAttribute.</Resolution>
   </Rule>
   <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
    <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   </Rule>
   <Rule TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308">
    <Resolution Name="ToUpperInvariant">In method {0}, replace the call to {1} with String.ToUpperInvariant().</Resolution>
   </Rule>
   <Rule TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225">
    <Resolution Name="Default">Provide a method named '{0}' as a friendly alternate for operator {1}.</Resolution>
   </Rule>
   <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
    <Resolution Name="Equals">{0} should override Equals.</Resolution>
    <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   </Rule>
   <Rule TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036">
    <Resolution Name="Equals">{0} should override Equals since it implements IComparable.</Resolution>
    <Resolution Name="Operator">{0} should define operator '{1}' since it implements IComparable.</Resolution>
   </Rule>
   <Rule TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721">
    <Resolution Name="SameType">The property name {0} is confusing given the existence of method {1}. Rename or remove one of these members.</Resolution>
   </Rule>
   <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
    <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   </Rule>
   <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
    <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
    <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
    <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide a StringComparison. This should be replaced with a call to {2}.</Resolution>
   </Rule>
   <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
    <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   </Rule>
   <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
    <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
