// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace NodaTime.Benchmarks.Storage.Proto {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Benchmarks {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkTypeResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult, global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult.Builder> internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkTypeResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult, global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult.Builder> internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkRun__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkRun, global::NodaTime.Benchmarks.Storage.Proto.BenchmarkRun.Builder> internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkRun__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Benchmarks() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChBiZW5jaG1hcmtzLnByb3RvEiFOb2RhVGltZS5CZW5jaG1hcmtzLlN0b3Jh" + 
          "Z2UuUHJvdG8ifwoTQmVuY2htYXJrVHlwZVJlc3VsdBIMCgR0eXBlGAEgAigJ" + 
          "EhUKDWNscl9uYW1lc3BhY2UYAiACKAkSQwoHcmVzdWx0cxgDIAMoCzIyLk5v" + 
          "ZGFUaW1lLkJlbmNobWFya3MuU3RvcmFnZS5Qcm90by5CZW5jaG1hcmtSZXN1" + 
          "bHQiTQoPQmVuY2htYXJrUmVzdWx0Eg4KBm1ldGhvZBgDIAIoCRISCgppdGVy" + 
          "YXRpb25zGAQgAigFEhYKDmR1cmF0aW9uX3RpY2tzGAUgAigDIpwBCgxCZW5j" + 
          "aG1hcmtSdW4SDwoHbWFjaGluZRgBIAIoCRINCgVsYWJlbBgCIAEoCRIeChZz" + 
          "dGFydF90aWNrc19zaW5jZV8wMDAxGAMgASgDEkwKDHR5cGVfcmVzdWx0cxgE" + 
          "IAMoCzI2Lk5vZGFUaW1lLkJlbmNobWFya3MuU3RvcmFnZS5Qcm90by5CZW5j" + 
          "aG1hcmtUeXBlUmVzdWx0");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkTypeResult__Descriptor = Descriptor.MessageTypes[0];
        internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkTypeResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult, global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult.Builder>(internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkTypeResult__Descriptor,
                new string[] { "Type", "ClrNamespace", "Results", });
        internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkResult__Descriptor = Descriptor.MessageTypes[1];
        internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult, global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult.Builder>(internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkResult__Descriptor,
                new string[] { "Method", "Iterations", "DurationTicks", });
        internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkRun__Descriptor = Descriptor.MessageTypes[2];
        internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkRun__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkRun, global::NodaTime.Benchmarks.Storage.Proto.BenchmarkRun.Builder>(internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkRun__Descriptor,
                new string[] { "Machine", "Label", "StartTicksSince0001", "TypeResults", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BenchmarkTypeResult : pb::GeneratedMessage<BenchmarkTypeResult, BenchmarkTypeResult.Builder> {
    private BenchmarkTypeResult() { }
    private static readonly BenchmarkTypeResult defaultInstance = new BenchmarkTypeResult().MakeReadOnly();
    private static readonly string[] _benchmarkTypeResultFieldNames = new string[] { "clr_namespace", "results", "type" };
    private static readonly uint[] _benchmarkTypeResultFieldTags = new uint[] { 18, 26, 10 };
    public static BenchmarkTypeResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BenchmarkTypeResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BenchmarkTypeResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NodaTime.Benchmarks.Storage.Proto.Benchmarks.internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkTypeResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BenchmarkTypeResult, BenchmarkTypeResult.Builder> InternalFieldAccessors {
      get { return global::NodaTime.Benchmarks.Storage.Proto.Benchmarks.internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkTypeResult__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int ClrNamespaceFieldNumber = 2;
    private bool hasClrNamespace;
    private string clrNamespace_ = "";
    public bool HasClrNamespace {
      get { return hasClrNamespace; }
    }
    public string ClrNamespace {
      get { return clrNamespace_; }
    }
    
    public const int ResultsFieldNumber = 3;
    private pbc::PopsicleList<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult> results_ = new pbc::PopsicleList<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult>();
    public scg::IList<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult> ResultsList {
      get { return results_; }
    }
    public int ResultsCount {
      get { return results_.Count; }
    }
    public global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult GetResults(int index) {
      return results_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasClrNamespace) return false;
        foreach (global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult element in ResultsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _benchmarkTypeResultFieldNames;
      if (hasType) {
        output.WriteString(1, field_names[2], Type);
      }
      if (hasClrNamespace) {
        output.WriteString(2, field_names[0], ClrNamespace);
      }
      if (results_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], results_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Type);
        }
        if (hasClrNamespace) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ClrNamespace);
        }
        foreach (global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult element in ResultsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BenchmarkTypeResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BenchmarkTypeResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BenchmarkTypeResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BenchmarkTypeResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BenchmarkTypeResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BenchmarkTypeResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BenchmarkTypeResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BenchmarkTypeResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BenchmarkTypeResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BenchmarkTypeResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BenchmarkTypeResult MakeReadOnly() {
      results_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BenchmarkTypeResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BenchmarkTypeResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BenchmarkTypeResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BenchmarkTypeResult result;
      
      private BenchmarkTypeResult PrepareBuilder() {
        if (resultIsReadOnly) {
          BenchmarkTypeResult original = result;
          result = new BenchmarkTypeResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BenchmarkTypeResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult.Descriptor; }
      }
      
      public override BenchmarkTypeResult DefaultInstanceForType {
        get { return global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult.DefaultInstance; }
      }
      
      public override BenchmarkTypeResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BenchmarkTypeResult) {
          return MergeFrom((BenchmarkTypeResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BenchmarkTypeResult other) {
        if (other == global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasClrNamespace) {
          ClrNamespace = other.ClrNamespace;
        }
        if (other.results_.Count != 0) {
          result.results_.Add(other.results_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_benchmarkTypeResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _benchmarkTypeResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasType = input.ReadString(ref result.type_);
              break;
            }
            case 18: {
              result.hasClrNamespace = input.ReadString(ref result.clrNamespace_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.results_, global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasClrNamespace {
        get { return result.hasClrNamespace; }
      }
      public string ClrNamespace {
        get { return result.ClrNamespace; }
        set { SetClrNamespace(value); }
      }
      public Builder SetClrNamespace(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClrNamespace = true;
        result.clrNamespace_ = value;
        return this;
      }
      public Builder ClearClrNamespace() {
        PrepareBuilder();
        result.hasClrNamespace = false;
        result.clrNamespace_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult> ResultsList {
        get { return PrepareBuilder().results_; }
      }
      public int ResultsCount {
        get { return result.ResultsCount; }
      }
      public global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult GetResults(int index) {
        return result.GetResults(index);
      }
      public Builder SetResults(int index, global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.results_[index] = value;
        return this;
      }
      public Builder SetResults(int index, global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.results_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddResults(global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.results_.Add(value);
        return this;
      }
      public Builder AddResults(global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.results_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeResults(scg::IEnumerable<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult> values) {
        PrepareBuilder();
        result.results_.Add(values);
        return this;
      }
      public Builder ClearResults() {
        PrepareBuilder();
        result.results_.Clear();
        return this;
      }
    }
    static BenchmarkTypeResult() {
      object.ReferenceEquals(global::NodaTime.Benchmarks.Storage.Proto.Benchmarks.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BenchmarkResult : pb::GeneratedMessage<BenchmarkResult, BenchmarkResult.Builder> {
    private BenchmarkResult() { }
    private static readonly BenchmarkResult defaultInstance = new BenchmarkResult().MakeReadOnly();
    private static readonly string[] _benchmarkResultFieldNames = new string[] { "duration_ticks", "iterations", "method" };
    private static readonly uint[] _benchmarkResultFieldTags = new uint[] { 40, 32, 26 };
    public static BenchmarkResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BenchmarkResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BenchmarkResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NodaTime.Benchmarks.Storage.Proto.Benchmarks.internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BenchmarkResult, BenchmarkResult.Builder> InternalFieldAccessors {
      get { return global::NodaTime.Benchmarks.Storage.Proto.Benchmarks.internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkResult__FieldAccessorTable; }
    }
    
    public const int MethodFieldNumber = 3;
    private bool hasMethod;
    private string method_ = "";
    public bool HasMethod {
      get { return hasMethod; }
    }
    public string Method {
      get { return method_; }
    }
    
    public const int IterationsFieldNumber = 4;
    private bool hasIterations;
    private int iterations_;
    public bool HasIterations {
      get { return hasIterations; }
    }
    public int Iterations {
      get { return iterations_; }
    }
    
    public const int DurationTicksFieldNumber = 5;
    private bool hasDurationTicks;
    private long durationTicks_;
    public bool HasDurationTicks {
      get { return hasDurationTicks; }
    }
    public long DurationTicks {
      get { return durationTicks_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMethod) return false;
        if (!hasIterations) return false;
        if (!hasDurationTicks) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _benchmarkResultFieldNames;
      if (hasMethod) {
        output.WriteString(3, field_names[2], Method);
      }
      if (hasIterations) {
        output.WriteInt32(4, field_names[1], Iterations);
      }
      if (hasDurationTicks) {
        output.WriteInt64(5, field_names[0], DurationTicks);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMethod) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Method);
        }
        if (hasIterations) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Iterations);
        }
        if (hasDurationTicks) {
          size += pb::CodedOutputStream.ComputeInt64Size(5, DurationTicks);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BenchmarkResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BenchmarkResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BenchmarkResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BenchmarkResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BenchmarkResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BenchmarkResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BenchmarkResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BenchmarkResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BenchmarkResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BenchmarkResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BenchmarkResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BenchmarkResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BenchmarkResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BenchmarkResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BenchmarkResult result;
      
      private BenchmarkResult PrepareBuilder() {
        if (resultIsReadOnly) {
          BenchmarkResult original = result;
          result = new BenchmarkResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BenchmarkResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult.Descriptor; }
      }
      
      public override BenchmarkResult DefaultInstanceForType {
        get { return global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult.DefaultInstance; }
      }
      
      public override BenchmarkResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BenchmarkResult) {
          return MergeFrom((BenchmarkResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BenchmarkResult other) {
        if (other == global::NodaTime.Benchmarks.Storage.Proto.BenchmarkResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMethod) {
          Method = other.Method;
        }
        if (other.HasIterations) {
          Iterations = other.Iterations;
        }
        if (other.HasDurationTicks) {
          DurationTicks = other.DurationTicks;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_benchmarkResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _benchmarkResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 26: {
              result.hasMethod = input.ReadString(ref result.method_);
              break;
            }
            case 32: {
              result.hasIterations = input.ReadInt32(ref result.iterations_);
              break;
            }
            case 40: {
              result.hasDurationTicks = input.ReadInt64(ref result.durationTicks_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMethod {
        get { return result.hasMethod; }
      }
      public string Method {
        get { return result.Method; }
        set { SetMethod(value); }
      }
      public Builder SetMethod(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMethod = true;
        result.method_ = value;
        return this;
      }
      public Builder ClearMethod() {
        PrepareBuilder();
        result.hasMethod = false;
        result.method_ = "";
        return this;
      }
      
      public bool HasIterations {
        get { return result.hasIterations; }
      }
      public int Iterations {
        get { return result.Iterations; }
        set { SetIterations(value); }
      }
      public Builder SetIterations(int value) {
        PrepareBuilder();
        result.hasIterations = true;
        result.iterations_ = value;
        return this;
      }
      public Builder ClearIterations() {
        PrepareBuilder();
        result.hasIterations = false;
        result.iterations_ = 0;
        return this;
      }
      
      public bool HasDurationTicks {
        get { return result.hasDurationTicks; }
      }
      public long DurationTicks {
        get { return result.DurationTicks; }
        set { SetDurationTicks(value); }
      }
      public Builder SetDurationTicks(long value) {
        PrepareBuilder();
        result.hasDurationTicks = true;
        result.durationTicks_ = value;
        return this;
      }
      public Builder ClearDurationTicks() {
        PrepareBuilder();
        result.hasDurationTicks = false;
        result.durationTicks_ = 0L;
        return this;
      }
    }
    static BenchmarkResult() {
      object.ReferenceEquals(global::NodaTime.Benchmarks.Storage.Proto.Benchmarks.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BenchmarkRun : pb::GeneratedMessage<BenchmarkRun, BenchmarkRun.Builder> {
    private BenchmarkRun() { }
    private static readonly BenchmarkRun defaultInstance = new BenchmarkRun().MakeReadOnly();
    private static readonly string[] _benchmarkRunFieldNames = new string[] { "label", "machine", "start_ticks_since_0001", "type_results" };
    private static readonly uint[] _benchmarkRunFieldTags = new uint[] { 18, 10, 24, 34 };
    public static BenchmarkRun DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BenchmarkRun DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BenchmarkRun ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NodaTime.Benchmarks.Storage.Proto.Benchmarks.internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkRun__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BenchmarkRun, BenchmarkRun.Builder> InternalFieldAccessors {
      get { return global::NodaTime.Benchmarks.Storage.Proto.Benchmarks.internal__static_NodaTime_Benchmarks_Storage_Proto_BenchmarkRun__FieldAccessorTable; }
    }
    
    public const int MachineFieldNumber = 1;
    private bool hasMachine;
    private string machine_ = "";
    public bool HasMachine {
      get { return hasMachine; }
    }
    public string Machine {
      get { return machine_; }
    }
    
    public const int LabelFieldNumber = 2;
    private bool hasLabel;
    private string label_ = "";
    public bool HasLabel {
      get { return hasLabel; }
    }
    public string Label {
      get { return label_; }
    }
    
    public const int StartTicksSince0001FieldNumber = 3;
    private bool hasStartTicksSince0001;
    private long startTicksSince0001_;
    public bool HasStartTicksSince0001 {
      get { return hasStartTicksSince0001; }
    }
    public long StartTicksSince0001 {
      get { return startTicksSince0001_; }
    }
    
    public const int TypeResultsFieldNumber = 4;
    private pbc::PopsicleList<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult> typeResults_ = new pbc::PopsicleList<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult>();
    public scg::IList<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult> TypeResultsList {
      get { return typeResults_; }
    }
    public int TypeResultsCount {
      get { return typeResults_.Count; }
    }
    public global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult GetTypeResults(int index) {
      return typeResults_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMachine) return false;
        foreach (global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult element in TypeResultsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _benchmarkRunFieldNames;
      if (hasMachine) {
        output.WriteString(1, field_names[1], Machine);
      }
      if (hasLabel) {
        output.WriteString(2, field_names[0], Label);
      }
      if (hasStartTicksSince0001) {
        output.WriteInt64(3, field_names[2], StartTicksSince0001);
      }
      if (typeResults_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], typeResults_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMachine) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Machine);
        }
        if (hasLabel) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Label);
        }
        if (hasStartTicksSince0001) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, StartTicksSince0001);
        }
        foreach (global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult element in TypeResultsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BenchmarkRun ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BenchmarkRun ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BenchmarkRun ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BenchmarkRun ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BenchmarkRun ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BenchmarkRun ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BenchmarkRun ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BenchmarkRun ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BenchmarkRun ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BenchmarkRun ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BenchmarkRun MakeReadOnly() {
      typeResults_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BenchmarkRun prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BenchmarkRun, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BenchmarkRun cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BenchmarkRun result;
      
      private BenchmarkRun PrepareBuilder() {
        if (resultIsReadOnly) {
          BenchmarkRun original = result;
          result = new BenchmarkRun();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BenchmarkRun MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NodaTime.Benchmarks.Storage.Proto.BenchmarkRun.Descriptor; }
      }
      
      public override BenchmarkRun DefaultInstanceForType {
        get { return global::NodaTime.Benchmarks.Storage.Proto.BenchmarkRun.DefaultInstance; }
      }
      
      public override BenchmarkRun BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BenchmarkRun) {
          return MergeFrom((BenchmarkRun) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BenchmarkRun other) {
        if (other == global::NodaTime.Benchmarks.Storage.Proto.BenchmarkRun.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMachine) {
          Machine = other.Machine;
        }
        if (other.HasLabel) {
          Label = other.Label;
        }
        if (other.HasStartTicksSince0001) {
          StartTicksSince0001 = other.StartTicksSince0001;
        }
        if (other.typeResults_.Count != 0) {
          result.typeResults_.Add(other.typeResults_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_benchmarkRunFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _benchmarkRunFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMachine = input.ReadString(ref result.machine_);
              break;
            }
            case 18: {
              result.hasLabel = input.ReadString(ref result.label_);
              break;
            }
            case 24: {
              result.hasStartTicksSince0001 = input.ReadInt64(ref result.startTicksSince0001_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.typeResults_, global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMachine {
        get { return result.hasMachine; }
      }
      public string Machine {
        get { return result.Machine; }
        set { SetMachine(value); }
      }
      public Builder SetMachine(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMachine = true;
        result.machine_ = value;
        return this;
      }
      public Builder ClearMachine() {
        PrepareBuilder();
        result.hasMachine = false;
        result.machine_ = "";
        return this;
      }
      
      public bool HasLabel {
        get { return result.hasLabel; }
      }
      public string Label {
        get { return result.Label; }
        set { SetLabel(value); }
      }
      public Builder SetLabel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLabel = true;
        result.label_ = value;
        return this;
      }
      public Builder ClearLabel() {
        PrepareBuilder();
        result.hasLabel = false;
        result.label_ = "";
        return this;
      }
      
      public bool HasStartTicksSince0001 {
        get { return result.hasStartTicksSince0001; }
      }
      public long StartTicksSince0001 {
        get { return result.StartTicksSince0001; }
        set { SetStartTicksSince0001(value); }
      }
      public Builder SetStartTicksSince0001(long value) {
        PrepareBuilder();
        result.hasStartTicksSince0001 = true;
        result.startTicksSince0001_ = value;
        return this;
      }
      public Builder ClearStartTicksSince0001() {
        PrepareBuilder();
        result.hasStartTicksSince0001 = false;
        result.startTicksSince0001_ = 0L;
        return this;
      }
      
      public pbc::IPopsicleList<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult> TypeResultsList {
        get { return PrepareBuilder().typeResults_; }
      }
      public int TypeResultsCount {
        get { return result.TypeResultsCount; }
      }
      public global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult GetTypeResults(int index) {
        return result.GetTypeResults(index);
      }
      public Builder SetTypeResults(int index, global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.typeResults_[index] = value;
        return this;
      }
      public Builder SetTypeResults(int index, global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.typeResults_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTypeResults(global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.typeResults_.Add(value);
        return this;
      }
      public Builder AddTypeResults(global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.typeResults_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTypeResults(scg::IEnumerable<global::NodaTime.Benchmarks.Storage.Proto.BenchmarkTypeResult> values) {
        PrepareBuilder();
        result.typeResults_.Add(values);
        return this;
      }
      public Builder ClearTypeResults() {
        PrepareBuilder();
        result.typeResults_.Clear();
        return this;
      }
    }
    static BenchmarkRun() {
      object.ReferenceEquals(global::NodaTime.Benchmarks.Storage.Proto.Benchmarks.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
