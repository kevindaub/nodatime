<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="WindowsToPosix" type="System.Byte[], mscorlib">
    <value>
        VgpBZmdoYW5pc3RhbiBTdGFuZGFyZCBUaW1l+kFzaWEvS2FidWwGQWxhc2thbiBTdGFuZGFyZCBUaW1l
        AkFtZXJpY2EvQW5jaG9yYWdlA0FyYWIgU3RhbmRhcmQgVGltZftBc2lhL1JpeWFkaAZBcmFiaWFuIFN0
        YW5kYXJkIFRpbWX6QXNpYS9EdWJhaQVBcmFiaWMgU3RhbmRhcmQgVGltZfxBc2lhL0JhZ2hkYWQIQXJn
        ZW50aW5hIFN0YW5kYXJkIFRpbWUFQW1lcmljYS9CdWVub3NfQWlyZXMHQXJtZW5pYW4gU3RhbmRhcmQg
        VGltZfxBc2lhL1llcmV2YW4HQXRsYW50aWMgU3RhbmRhcmQgVGltZQBBbWVyaWNhL0hhbGlmYXgKQVVT
        IENlbnRyYWwgU3RhbmRhcmQgVGltZQFBdXN0cmFsaWEvRGFyd2luCkFVUyBFYXN0ZXJuIFN0YW5kYXJk
        IFRpbWUBQXVzdHJhbGlhL1N5ZG5leQlBemVyYmFpamFuIFN0YW5kYXJkIFRpbWX5QXNpYS9CYWt1BUF6
        b3JlcyBTdGFuZGFyZCBUaW1lAEF0bGFudGljL0F6b3JlcwlCYW5nbGFkZXNoIFN0YW5kYXJkIFRpbWX6
        QXNpYS9EaGFrYQ1DYW5hZGEgQ2VudHJhbCBTdGFuZGFyZCBUaW1l/kFtZXJpY2EvUmVnaW5hCUNhcGUg
        VmVyZGUgU3RhbmRhcmQgVGltZQRBdGxhbnRpYy9DYXBlX1ZlcmRlB0NhdWNhc3VzIFN0YW5kYXJkIFRp
        bWX8QXNpYS9ZZXJldmFuDUNlbi4gQXVzdHJhbGlhIFN0YW5kYXJkIFRpbWUDQXVzdHJhbGlhL0FkZWxh
        aWRlDkNlbnRyYWwgQW1lcmljYSBTdGFuZGFyZCBUaW1lAkFtZXJpY2EvR3VhdGVtYWxhC0NlbnRyYWwg
        QXNpYSBTdGFuZGFyZCBUaW1l+0FzaWEvQWxtYXR5EENlbnRyYWwgQnJhemlsaWFuIFN0YW5kYXJkIFRp
        bWX+QW1lcmljYS9DdWlhYmENQ2VudHJhbCBFdXJvcGUgU3RhbmRhcmQgVGltZQBFdXJvcGUvQnVkYXBl
        c3QPQ2VudHJhbCBFdXJvcGVhbiBTdGFuZGFyZCBUaW1l/UV1cm9wZS9XYXJzYXcOQ2VudHJhbCBQYWNp
        ZmljIFN0YW5kYXJkIFRpbWUEUGFjaWZpYy9HdWFkYWxjYW5hbA9DZW50cmFsIFN0YW5kYXJkIFRpbWUg
        KE1leGljbykEQW1lcmljYS9NZXhpY29fQ2l0eQZDZW50cmFsIFN0YW5kYXJkIFRpbWUAQW1lcmljYS9D
        aGljYWdvBENoaW5hIFN0YW5kYXJkIFRpbWX9QXNpYS9TaGFuZ2hhaQdEYXRlbGluZSBTdGFuZGFyZCBU
        aW1l+kV0Yy9HTVQrMTIIRS4gQWZyaWNhIFN0YW5kYXJkIFRpbWX+QWZyaWNhL05haXJvYmkLRS4gQXVz
        dHJhbGlhIFN0YW5kYXJkIFRpbWUDQXVzdHJhbGlhL0JyaXNiYW5lCEUuIEV1cm9wZSBTdGFuZGFyZCBU
        aW1l/EV1cm9wZS9NaW5zaw9FLiBTb3V0aCBBbWVyaWNhIFN0YW5kYXJkIFRpbWUCQW1lcmljYS9TYW9f
        UGF1bG8GRWFzdGVybiBTdGFuZGFyZCBUaW1lAUFtZXJpY2EvTmV3X1lvcmsERWd5cHQgU3RhbmRhcmQg
        VGltZfxBZnJpY2EvQ2Fpcm8LRWthdGVyaW5idXJnIFN0YW5kYXJkIFRpbWUDQXNpYS9ZZWthdGVyaW5i
        dXJnA0ZpamkgU3RhbmRhcmQgVGltZfxQYWNpZmljL0ZpamkCRkxFIFN0YW5kYXJkIFRpbWX7RXVyb3Bl
        L0tpZXYHR2VvcmdpYW4gU3RhbmRhcmQgVGltZfxBc2lhL1RiaWxpc2kCR01UIFN0YW5kYXJkIFRpbWX9
        RXVyb3BlL0xvbmRvbghHcmVlbmxhbmQgU3RhbmRhcmQgVGltZQBBbWVyaWNhL0dvZHRoYWIIR3JlZW53
        aWNoIFN0YW5kYXJkIFRpbWUDQXRsYW50aWMvUmV5a2phdmlrAkdUQiBTdGFuZGFyZCBUaW1lAEV1cm9w
        ZS9Jc3RhbmJ1bAdIYXdhaWlhbiBTdGFuZGFyZCBUaW1lAVBhY2lmaWMvSG9ub2x1bHUESW5kaWEgU3Rh
        bmRhcmQgVGltZf1Bc2lhL0NhbGN1dHRhA0lyYW4gU3RhbmRhcmQgVGltZftBc2lhL1RlaHJhbgVJc3Jh
        ZWwgU3RhbmRhcmQgVGltZf5Bc2lhL0plcnVzYWxlbQVKb3JkYW4gU3RhbmRhcmQgVGltZfpBc2lhL0Ft
        bWFuCEthbWNoYXRrYSBTdGFuZGFyZCBUaW1l/kFzaWEvS2FtY2hhdGthBEtvcmVhIFN0YW5kYXJkIFRp
        bWX6QXNpYS9TZW91bAZNYWdhZGFuIFN0YW5kYXJkIFRpbWX8QXNpYS9NYWdhZGFuCE1hdXJpdGl1cyBT
        dGFuZGFyZCBUaW1lAUluZGlhbi9NYXVyaXRpdXMHTWV4aWNvIFN0YW5kYXJkIFRpbWUgMgJBbWVyaWNh
        L0NoaWh1YWh1YQVNZXhpY28gU3RhbmRhcmQgVGltZQRBbWVyaWNhL01leGljb19DaXR5C01pZC1BdGxh
        bnRpYyBTdGFuZGFyZCBUaW1l+UV0Yy9HTVQrMgpNaWRkbGUgRWFzdCBTdGFuZGFyZCBUaW1l+0FzaWEv
        QmVpcnV0CU1vbnRldmlkZW8gU3RhbmRhcmQgVGltZQNBbWVyaWNhL01vbnRldmlkZW8GTW9yb2NjbyBT
        dGFuZGFyZCBUaW1lAkFmcmljYS9DYXNhYmxhbmNhEE1vdW50YWluIFN0YW5kYXJkIFRpbWUgKE1leGlj
        bykCQW1lcmljYS9DaGlodWFodWEHTW91bnRhaW4gU3RhbmRhcmQgVGltZf5BbWVyaWNhL0RlbnZlcgZN
        eWFubWFyIFN0YW5kYXJkIFRpbWX8QXNpYS9SYW5nb29uDk4uIENlbnRyYWwgQXNpYSBTdGFuZGFyZCBU
        aW1lAUFzaWEvTm92b3NpYmlyc2sGTmFtaWJpYSBTdGFuZGFyZCBUaW1lAEFmcmljYS9XaW5kaG9lawRO
        ZXBhbCBTdGFuZGFyZCBUaW1l/UFzaWEvS2F0bWFuZHUKTmV3IFplYWxhbmQgU3RhbmRhcmQgVGltZQFQ
        YWNpZmljL0F1Y2tsYW5kC05ld2ZvdW5kbGFuZCBTdGFuZGFyZCBUaW1lAUFtZXJpY2EvU3RfSm9obnMO
        Tm9ydGggQXNpYSBFYXN0IFN0YW5kYXJkIFRpbWX8QXNpYS9Jcmt1dHNrCU5vcnRoIEFzaWEgU3RhbmRh
        cmQgVGltZQFBc2lhL0tyYXNub3lhcnNrCVBhY2lmaWMgU0EgU3RhbmRhcmQgVGltZQFBbWVyaWNhL1Nh
        bnRpYWdvD1BhY2lmaWMgU3RhbmRhcmQgVGltZSAoTWV4aWNvKQVBbWVyaWNhL1NhbnRhX0lzYWJlbAZQ
        YWNpZmljIFN0YW5kYXJkIFRpbWUEQW1lcmljYS9Mb3NfQW5nZWxlcwdQYWtpc3RhbiBTdGFuZGFyZCBU
        aW1l/EFzaWEvS2FyYWNoaQdQYXJhZ3VheSBTdGFuZGFyZCBUaW1lAUFtZXJpY2EvQXN1bmNpb24GUm9t
        YW5jZSBTdGFuZGFyZCBUaW1l/EV1cm9wZS9QYXJpcwZSdXNzaWFuIFN0YW5kYXJkIFRpbWX9RXVyb3Bl
        L01vc2NvdwlTQSBFYXN0ZXJuIFN0YW5kYXJkIFRpbWUAQW1lcmljYS9DYXllbm5lCVNBIFBhY2lmaWMg
        U3RhbmRhcmQgVGltZf5BbWVyaWNhL0JvZ290YQlTQSBXZXN0ZXJuIFN0YW5kYXJkIFRpbWX+QW1lcmlj
        YS9MYV9QYXoEU2Ftb2EgU3RhbmRhcmQgVGltZfxQYWNpZmljL0FwaWEGU0UgQXNpYSBTdGFuZGFyZCBU
        aW1l/EFzaWEvQmFuZ2tvawhTaW5nYXBvcmUgU3RhbmRhcmQgVGltZf5Bc2lhL1NpbmdhcG9yZQtTb3V0
        aCBBZnJpY2EgU3RhbmRhcmQgVGltZQRBZnJpY2EvSm9oYW5uZXNidXJnCFNyaSBMYW5rYSBTdGFuZGFy
        ZCBUaW1l/EFzaWEvQ29sb21ibwRTeXJpYSBTdGFuZGFyZCBUaW1l/UFzaWEvRGFtYXNjdXMFVGFpcGVp
        IFN0YW5kYXJkIFRpbWX7QXNpYS9UYWlwZWkHVGFzbWFuaWEgU3RhbmRhcmQgVGltZQFBdXN0cmFsaWEv
        SG9iYXJ0BFRva3lvIFN0YW5kYXJkIFRpbWX6QXNpYS9Ub2t5bwRUb25nYSBTdGFuZGFyZCBUaW1lAlBh
        Y2lmaWMvVG9uZ2F0YXB1ClVsYWFuYmFhdGFyIFN0YW5kYXJkIFRpbWUBQXNpYS9VbGFhbmJhYXRhcglV
        UyBFYXN0ZXJuIFN0YW5kYXJkIFRpbWUFQW1lcmljYS9JbmRpYW5hcG9saXMKVVMgTW91bnRhaW4gU3Rh
        bmRhcmQgVGltZQBBbWVyaWNhL1Bob2VuaXjzVVRD90V0Yy9HTVT2VVRDKzEy+kV0Yy9HTVQtMTL2VVRD
        LTAy+UV0Yy9HTVQrMvZVVEMtMTH6RXRjL0dNVCsxMQhWZW5lenVlbGEgU3RhbmRhcmQgVGltZQBBbWVy
        aWNhL0NhcmFjYXMKVmxhZGl2b3N0b2sgU3RhbmRhcmQgVGltZQFBc2lhL1ZsYWRpdm9zdG9rC1cuIEF1
        c3RyYWxpYSBTdGFuZGFyZCBUaW1lAEF1c3RyYWxpYS9QZXJ0aBBXLiBDZW50cmFsIEFmcmljYSBTdGFu
        ZGFyZCBUaW1l/EFmcmljYS9MYWdvcwhXLiBFdXJvcGUgU3RhbmRhcmQgVGltZf1FdXJvcGUvQmVybGlu
        CFdlc3QgQXNpYSBTdGFuZGFyZCBUaW1l/UFzaWEvVGFzaGtlbnQLV2VzdCBQYWNpZmljIFN0YW5kYXJk
        IFRpbWUFUGFjaWZpYy9Qb3J0X01vcmVzYnkGWWFrdXRzayBTdGFuZGFyZCBUaW1l/EFzaWEvWWFrdXRz
        aw==
</value>
  </data>
</root>